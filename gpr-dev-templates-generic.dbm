<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.8.2-beta1" last-position="0,1946" last-zoom="0.7"
	 default-schema="public" default-owner="postgres">
<role name="super_user"
      superuser="true"
      createdb="true"
      replication="true"
      createrole="true"
      inherit="true"
      encrypted="true"
      password="********">
</role>

<role name="alfresco_user"
      inherit="true"
      encrypted="true"
      password="********">
	<roles names="super_user" role-type="member" />
</role>

<role name="jasperdb"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="assessor"
      inherit="true"
      encrypted="true"
      password="********">
</role>

<role name="anon"
      inherit="true"
      encrypted="true"
      password="********">
	<roles names="super_user" role-type="member" />
</role>

<database name="gpr-dev01" encoding="UTF8" lc-collate="en_ZA" lc-ctype="en_ZA">
	<role name="postgres"/>
	<tablespace name="pg_default"/>
</database>

<schema name="public" protected="true" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<schema name="basic_auth" rect-visible="true" fill-color="#b8075e">
	<role name="postgres"/>
</schema>

<extension name="json_build" cur-version="1.0.0">
	<schema name="public"/>
	<comment><![CDATA[json_build extension]]></comment>
</extension>

<extension name="pgcrypto" cur-version="1.0">
	<schema name="public"/>
	<comment><![CDATA[cryptographic functions]]></comment>
</extension>

<usertype name="token_type_enum" configuration="enumeration">
	<schema name="public"/>
	<role name="postgres"/>
	<enumeration values="validation,reset"/>
</usertype>

<function name="check_role_exists"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
begin
  if not exists (select 1 from pg_roles as r where r.rolname = new.role) then
    raise foreign_key_violation using message =
      'unknown database role: ' || new.role;
    return null;
  end if;
  return new;
end
]]></definition>
</function>

<function name="clearance_for_role"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="u">
		<type name="name"/>
	</parameter>
	<definition><![CDATA[
declare
  ok boolean;
begin
  select exists (
    select rolname
      from pg_authid
     where pg_has_role(current_user, oid, 'member')
       and rolname = u
  ) into ok;
  if not ok then
    raise invalid_password using message =
      'current user not member of role ' || u;
  end if;
end
]]></definition>
</function>

<function name="current_email"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="text"/>
	</return-type>
	<definition><![CDATA[
begin
  return current_setting('postgrest.claims.email');
exception
  -- handle unrecognized configuration parameter error
  when undefined_object then return '';
end;
]]></definition>
</function>

<function name="encrypt_pass"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
begin
  if tg_op = 'INSERT' or new.pass <> old.pass then
    new.pass = crypt(new.pass, gen_salt('bf'));
  end if;
  return new;
end
]]></definition>
</function>

<function name="send_validation"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
declare
  tok uuid;
begin
  select uuid_generate_v4() into tok;

  insert into basic_auth.tokens (token, token_type, email)
         values (tok, 'validation', new.email);

  insert into public.email_notifications 
		(email_to, subject, body, token_email, token, token_type)
         values (new.email,'New User Validation','Follow Link Below to Validate New Account:',true,tok,'validation');
 		
  --perform pg_notify('validate',
    --json_build_object(
      --'email', new.email,
      --'token', tok,
      --'token_type', 'validation'
    --)::text
  --);
  return new;
end
]]></definition>
</function>

<function name="user_role"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="name"/>
	</return-type>
	<parameter name="email">
		<type name="text"/>
	</parameter>
	<parameter name="pass">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
begin
  return (
  select role from basic_auth.users
   where users.email = user_role.email
     and users.pass = crypt(user_role.pass, users.pass)
     and users.verified = true
     and users.ldap_user = false
  );
end;
]]></definition>
</function>

<sequence name="call_application_statuses_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="call_application_statuses">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[The status of a call application.]]></comment>
	<position x="0" y="292"/>
	<column name="id" not-null="true" sequence="public.call_application_statuses_id_seq">
		<type name="integer"/>
	</column>
	<column name="status" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="call_application_statuses_pkey" type="pk-constr" table="public.call_application_statuses">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="call_application_statuses_status_uq" type="uq-constr" table="public.call_application_statuses">
		<columns names="status" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="call_applications_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="call_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A call application is a response to a call from an organisation.]]></comment>
	<position x="1321.18" y="2656.29"/>
	<column name="id" not-null="true" sequence="public.call_applications_id_seq">
		<type name="integer"/>
	</column>
	<column name="call">
		<type name="integer"/>
	</column>
	<column name="amount">
		<type name="numeric" length="20" precision="2"/>
	</column>
	<column name="applicant">
		<type name="integer"/>
	</column>
	<column name="place">
		<type name="integer"/>
	</column>
	<column name="comments">
		<type name="text"/>
	</column>
	<column name="application_status" not-null="true" default-value="1">
		<type name="integer"/>
	</column>
	<column name="score">
		<type name="integer"/>
	</column>
	<column name="title">
		<type name="text"/>
	</column>
	<column name="pmu_advisory">
		<type name="text"/>
	</column>
	<column name="pm_advisory">
		<type name="text"/>
	</column>
	<column name="contact_person">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="ack_email">
		<type name="integer"/>
	</column>
	<constraint name="call_applications_pkey" type="pk-constr" table="public.call_applications">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<view name="rpc_alfresco_change_application_status">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="2129.18" y="3336.23"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id AS "projectId",
    call_applications.id AS "projectCode",
    call_applications.title AS "projectTitle",
    call_application_statuses.status AS "projectStatusCode"
   FROM (call_applications
     LEFT JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)));]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_change_application_status" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="projectId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="projectCode">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="projectTitle">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="projectStatusCode">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_change_application_status"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_change_application_status"/>
	</return-type>
	<parameter name="projectCode">
		<type name="text"/>
	</parameter>
	<parameter name="newStatusCode">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable  
DECLARE project_code INTEGER;
BEGIN	
	SET ROLE postgres;
	
        SELECT call_applications.id INTO project_code
        FROM call_applications
        WHERE call_applications.id = alfresco_change_application_status."projectCode"::int;


        IF project_code IS NULL THEN
		RAISE EXCEPTION 'Application does not Exist!';
        END IF;


        UPDATE call_applications SET (application_status) = (alfresco_change_application_status."newStatusCode"::int)
        WHERE call_applications.id = project_code;         

        RETURN QUERY SELECT * FROM rpc_alfresco_change_application_status 
	WHERE  rpc_alfresco_change_application_status."projectId" = project_code;
		       
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;]]></definition>
</function>

<sequence name="calls_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="calls">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A call is a request for project proposals to support a KPI.]]></comment>
	<position x="1168.63" y="163.429"/>
	<column name="id" not-null="true" sequence="public.calls_id_seq">
		<type name="integer"/>
	</column>
	<column name="call_reference" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="call_date">
		<type name="date"/>
	</column>
	<column name="evaluation_date">
		<type name="date"/>
	</column>
	<column name="key_performance_indicator">
		<type name="integer"/>
	</column>
	<column name="admin_compliance_template">
		<type name="integer"/>
	</column>
	<column name="relevance_compliance_template">
		<type name="integer"/>
	</column>
	<column name="assessment_compliance_template">
		<type name="integer"/>
	</column>
	<column name="due_diligence_compliance_template">
		<type name="integer"/>
	</column>
	<column name="call_budget">
		<type name="numeric" length="20" precision="2"/>
	</column>
	<column name="call_reference_path_safe" not-null="true" default-value="''::character varying">
		<type name="character varying" length="50"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="calls_call_reference_uq" type="uq-constr" table="public.calls">
		<columns names="call_reference" ref-type="src-columns"/>
	</constraint>
	<constraint name="calls_pkey" type="pk-constr" table="public.calls">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="key_performance_indicators_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="key_performance_indicators">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A key performance indicator (KPI) is a measure of progress in a KRA.]]></comment>
	<position x="1681.43" y="3779.14"/>
	<column name="id" not-null="true" sequence="public.key_performance_indicators_id_seq">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="reporting_period">
		<type name="text"/>
	</column>
	<column name="baseline">
		<type name="text"/>
	</column>
	<column name="remarks">
		<type name="text"/>
	</column>
	<column name="status">
		<type name="text"/>
	</column>
	<column name="key_result_area">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="key_performance_indicators_code_uq" type="uq-constr" table="public.key_performance_indicators">
		<columns names="code,key_result_area" ref-type="src-columns"/>
	</constraint>
	<constraint name="key_performance_indicators_pkey" type="pk-constr" table="public.key_performance_indicators">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="key_result_areas_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="key_result_areas">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A key result area (KRA) is a component of a programme.]]></comment>
	<position x="2227.18" y="163.429"/>
	<column name="id" not-null="true" sequence="public.key_result_areas_id_seq">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="programme">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="key_result_areas_code_uq" type="uq-constr" table="public.key_result_areas">
		<columns names="code,programme" ref-type="src-columns"/>
	</constraint>
	<constraint name="key_result_areas_pkey" type="pk-constr" table="public.key_result_areas">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="organisations_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="organisations">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[An organisation is an institution that operates in the sector.]]></comment>
	<position x="758.619" y="3560.44"/>
	<column name="id" not-null="true" sequence="public.organisations_id_seq">
		<type name="integer"/>
	</column>
	<column name="code">
		<type name="character varying" length="50"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="web_site">
		<type name="character varying" length="255"/>
	</column>
	<column name="vat_no">
		<type name="character varying" length="255"/>
	</column>
	<column name="npo_no">
		<type name="character varying" length="255"/>
	</column>
	<column name="cell_phone">
		<type name="character varying" length="255"/>
	</column>
	<column name="work_phone">
		<type name="character varying" length="255"/>
	</column>
	<column name="email_address">
		<type name="character varying" length="255"/>
	</column>
	<column name="fax_no">
		<type name="character varying" length="255"/>
	</column>
	<column name="street_first_line">
		<type name="character varying" length="255"/>
	</column>
	<column name="street_second_line">
		<type name="character varying" length="255"/>
	</column>
	<column name="postal_first_line">
		<type name="character varying" length="255"/>
	</column>
	<column name="postal_second_line">
		<type name="character varying" length="255"/>
	</column>
	<column name="street_suburb">
		<type name="integer"/>
	</column>
	<column name="street_place">
		<type name="integer"/>
	</column>
	<column name="street_province">
		<type name="integer"/>
	</column>
	<column name="referee">
		<type name="integer"/>
	</column>
	<column name="auditor">
		<type name="integer"/>
	</column>
	<column name="organisation_type">
		<type name="integer"/>
	</column>
	<column name="organisation_status">
		<type name="integer"/>
	</column>
	<column name="pts_assocode">
		<type name="text"/>
	</column>
	<column name="contact_person">
		<type name="character varying" length="50"/>
	</column>
	<column name="main_contact_person">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="postal_suburb">
		<type name="integer"/>
	</column>
	<column name="postal_place">
		<type name="integer"/>
	</column>
	<column name="postal_province">
		<type name="integer"/>
	</column>
	<constraint name="organisation_code_uq" type="uq-constr" table="public.organisations">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="organisations_pkey" type="pk-constr" table="public.organisations">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="programmes_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="programmes">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A programme is a group of projects that have a common outcome.]]></comment>
	<position x="623.317" y="548.629"/>
	<column name="id" not-null="true" sequence="public.programmes_id_seq">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="start_date">
		<type name="date"/>
	</column>
	<column name="end_date">
		<type name="date"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="programmes_code_uq" type="uq-constr" table="public.programmes">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="programmes_pkey" type="pk-constr" table="public.programmes">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="suburbs_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="suburbs">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A suburb is part of a place with a Street and PO Box code, as defined by SAPO.]]></comment>
	<position x="1078.16" y="548.629"/>
	<column name="id" not-null="true" sequence="public.suburbs_id_seq">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="po_box_code">
		<type name="character varying" length="50"/>
	</column>
	<column name="street_code">
		<type name="character varying" length="50"/>
	</column>
	<column name="latitude">
		<type name="real"/>
	</column>
	<column name="longitude">
		<type name="real"/>
	</column>
	<column name="province">
		<type name="integer"/>
	</column>
	<column name="place">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="suburbs_pkey" type="pk-constr" table="public.suburbs">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<view name="rpc_alfresco_create_application_code">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="148.571" y="4366"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id AS "projectCode"
   FROM call_applications;]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_create_application_code" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="projectCode">
		<type name="integer"/>
	</typeattrib>
</usertype>

<function name="alfresco_create_application_code"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_create_application_code"/>
	</return-type>
	<parameter name="callCode">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
DECLARE project_code INTEGER;
DECLARE call_id INTEGER;
BEGIN	
	SET ROLE postgres;
	
        SELECT calls.id INTO call_id
        FROM calls
        WHERE calls.call_reference = "callCode";

        IF call_id IS NULL THEN
		RAISE EXCEPTION 'Call Code Invalid';
        END IF;
 
        INSERT INTO call_applications (call) VALUES (call_id) 
        RETURNING call_applications.id INTO project_code;

        RETURN QUERY SELECT * FROM rpc_alfresco_create_application_code 
	WHERE  rpc_alfresco_create_application_code."projectCode" = project_code;
		       
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;]]></definition>
</function>

<view name="rpc_alfresco_get_calls">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="289.428" y="4456"/>
	<reference>
		<expression><![CDATA[ SELECT calls.id AS "callId",
    calls.call_reference_path_safe AS "callCode",
    calls.name AS "callName",
    key_performance_indicators.id AS "keyPerformanceIndicatorId",
    key_performance_indicators.code AS "keyPerformanceIndicatorCode",
    key_performance_indicators.name AS "keyPerformanceIndicatorName",
    key_result_areas.id AS "keyResultAreaId",
    key_result_areas.code AS "keyResultAreaCode",
    key_result_areas.name AS "keyResultAreaName",
    programmes.id AS "programmeId",
    programmes.code AS "programmeCode",
    programmes.name AS "programmeName"
   FROM (((calls
     LEFT JOIN key_performance_indicators ON ((calls.key_performance_indicator = key_performance_indicators.id)))
     LEFT JOIN key_result_areas ON ((key_result_areas.id = key_performance_indicators.key_result_area)))
     LEFT JOIN programmes ON ((key_result_areas.programme = programmes.id)));]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_calls" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="callId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="callCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="callName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="keyPerformanceIndicatorId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="keyPerformanceIndicatorCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="keyPerformanceIndicatorName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="keyResultAreaId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="keyResultAreaCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="keyResultAreaName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="programmeId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="programmeCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="programmeName">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_calls"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_calls"/>
	</return-type>
	<parameter name="callId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="callCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="programmeId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="programmeCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
	
        RETURN QUERY SELECT * FROM rpc_alfresco_get_calls 
	WHERE 
		rpc_alfresco_get_calls."callId" = COALESCE(alfresco_get_calls."callId",rpc_alfresco_get_calls."callId")
	AND 	rpc_alfresco_get_calls."callCode" = COALESCE(alfresco_get_calls."callCode",rpc_alfresco_get_calls."callCode")
	AND 	rpc_alfresco_get_calls."programmeId" = COALESCE(alfresco_get_calls."programmeId",rpc_alfresco_get_calls."programmeId")
	AND 	rpc_alfresco_get_calls."programmeCode" = COALESCE(alfresco_get_calls."programmeCode",rpc_alfresco_get_calls."programmeCode")
	ORDER BY rpc_alfresco_get_calls."callId";
        

	--EXCEPTION WHEN OTHERS THEN 
	--RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<sequence name="places_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="places">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A place is a city or town, as defined by SAPO.]]></comment>
	<position x="1504.1" y="548.629"/>
	<column name="id" not-null="true" sequence="public.places_id_seq">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="province">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="places_pkey" type="pk-constr" table="public.places">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="provinces_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="provinces">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A province is one of the 9 provinces in the country.]]></comment>
	<position x="1920.71" y="548.629"/>
	<column name="id" not-null="true" sequence="public.provinces_id_seq">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="provinces_code_uq" type="uq-constr" table="public.provinces">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="provinces_name_uq" type="uq-constr" table="public.provinces">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
	<constraint name="provinces_pkey" type="pk-constr" table="public.provinces">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<view name="rpc_alfresco_get_places">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="668.292" y="4538.86"/>
	<reference>
		<expression><![CDATA[ SELECT places.id AS "placesId",
    places.name AS "placesName",
    provinces.id AS "provinceId",
    provinces.code AS "provinceCode",
    provinces.name AS "provinceName"
   FROM (places
     JOIN provinces ON ((places.province = provinces.id)))
  ORDER BY places.name;]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_places" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="placesId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="placesName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="provinceId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="provinceCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="provinceName">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_places"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_places"/>
	</return-type>
	<parameter name="provinceId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="provinceCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
		
        RETURN QUERY SELECT * FROM rpc_alfresco_get_places 
	WHERE 
	 	rpc_alfresco_get_places."provinceId" = COALESCE(alfresco_get_places."provinceId",rpc_alfresco_get_places."provinceId")
	AND 	rpc_alfresco_get_places."provinceCode" = COALESCE(alfresco_get_places."provinceCode",rpc_alfresco_get_places."provinceCode")
	ORDER BY rpc_alfresco_get_places."provinceCode";
        
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<view name="rpc_alfresco_get_programmes">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="922.606" y="4454.57"/>
	<reference>
		<expression><![CDATA[ SELECT programmes.id AS "programmeId",
    programmes.code AS "programmeCode",
    programmes.name AS "programmeName"
   FROM programmes;]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_programmes" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="programmeId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="programmeCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="programmeName">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_programmes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_programmes"/>
	</return-type>
	<parameter name="programmeId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="programmeCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
	
        RETURN QUERY SELECT * FROM rpc_alfresco_get_programmes 
	WHERE 
	 	rpc_alfresco_get_programmes."programmeId" = COALESCE(alfresco_get_programmes."programmeId",rpc_alfresco_get_programmes."programmeId")
	AND 	rpc_alfresco_get_programmes."programmeCode" = COALESCE(alfresco_get_programmes."programmeCode",rpc_alfresco_get_programmes."programmeCode")
	ORDER BY rpc_alfresco_get_programmes."programmeCode";
        

	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<view name="rpc_alfresco_get_project_statuses">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1205.04" y="4410.29"/>
	<reference>
		<expression><![CDATA[ SELECT call_application_statuses.id AS "projectStatusId",
    (call_application_statuses.status)::character varying(50) AS "projectStatusCode",
    call_application_statuses.description AS "projectStatusName"
   FROM call_application_statuses
  ORDER BY call_application_statuses.id;]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_project_statuses" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="projectStatusId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="projectStatusCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="projectStatusName">
		<type name="text"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_project_statuses"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_project_statuses"/>
	</return-type>
	<parameter name="projectStatusId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="projectStatusCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
	
        RETURN QUERY SELECT * FROM rpc_alfresco_get_project_statuses 
	WHERE 
	rpc_alfresco_get_project_statuses."projectStatusId" = COALESCE(alfresco_get_project_statuses."projectStatusId",rpc_alfresco_get_project_statuses."projectStatusId")
	AND rpc_alfresco_get_project_statuses."projectStatusCode" = COALESCE(alfresco_get_project_statuses."projectStatusCode",rpc_alfresco_get_project_statuses."projectStatusCode")
	ORDER BY rpc_alfresco_get_project_statuses."projectStatusId";
        

--	EXCEPTION WHEN OTHERS THEN /*Catch all*/
--	RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<view name="rpc_alfresco_get_provinces">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="212.857" y="4329.11"/>
	<reference>
		<expression><![CDATA[ SELECT provinces.id AS "provinceId",
    provinces.code AS "provinceCode",
    provinces.name AS "provinceName"
   FROM provinces
  ORDER BY provinces.code;]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_provinces" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="provinceId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="provinceCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="provinceName">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_provinces"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_provinces"/>
	</return-type>
	<parameter name="provinceId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="provinceCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
	
        RETURN QUERY SELECT * FROM rpc_alfresco_get_provinces 
	WHERE 
	 	rpc_alfresco_get_provinces."provinceId" = COALESCE(alfresco_get_provinces."provinceId",rpc_alfresco_get_provinces."provinceId")
	AND 	rpc_alfresco_get_provinces."provinceCode" = COALESCE(alfresco_get_provinces."provinceCode",rpc_alfresco_get_provinces."provinceCode")
	ORDER BY rpc_alfresco_get_provinces."provinceCode";
        

	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<function name="create_ldap_user"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="email">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
  insert into basic_auth.users (email, pass, role,ldap_user,verified) values
    (create_ldap_user.email,'', 'anon',true,true);
]]></definition>
</function>

<function name="genorgcode"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
begin
  if tg_op = 'INSERT' then
    new.code = 'ORG'::text || to_char(new.id , 'FM00000'::text); 
  end if;
  return new;
end
]]></definition>
</function>

<function name="request_password_reset"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="email">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
declare
  tok uuid;
begin
  delete from basic_auth.tokens
   where token_type = 'reset'
     and tokens.email = request_password_reset.email;

  select uuid_generate_v4() into tok;
  insert into basic_auth.tokens (token, token_type, email)
         values (tok, 'reset', request_password_reset.email);
  perform pg_notify('reset',
    json_build_object(
      'email', request_password_reset.email,
      'token', tok,
      'token_type', 'reset'
    )::text
  );
end;
]]></definition>
</function>

<function name="reset_password"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="email">
		<type name="text"/>
	</parameter>
	<parameter name="token">
		<type name="uuid"/>
	</parameter>
	<parameter name="pass">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
declare
  tok uuid;
begin
  if exists(select 1 from basic_auth.tokens
             where tokens.email = reset_password.email
               and tokens.token = reset_password.token
               and token_type = 'reset') then
    update basic_auth.users set pass=reset_password.pass
     where users.email = reset_password.email;

    delete from basic_auth.tokens
     where tokens.email = reset_password.email
       and tokens.token = reset_password.token
       and token_type = 'reset';
  else
    raise invalid_password using message =
      'invalid user or token';
  end if;
  delete from basic_auth.tokens
   where token_type = 'reset'
     and tokens.email = reset_password.email;

  select uuid_generate_v4() into tok;
  insert into basic_auth.tokens (token, token_type, email)
         values (tok, 'reset', reset_password.email);
  perform pg_notify('reset',
    json_build_object(
      'email', reset_password.email,
      'token', tok
    )::text
  );
end;
]]></definition>
</function>

<function name="signup"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="email">
		<type name="text"/>
	</parameter>
	<parameter name="pass">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
  insert into basic_auth.users (email, pass, role) values
    (signup.email, signup.pass, 'anon');
]]></definition>
</function>

<function name="update_users"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
begin
  if tg_op = 'INSERT' then
    perform basic_auth.clearance_for_role(new.role);

    insert into basic_auth.users
      (role, pass, email, verified) values
      (coalesce(new.role, 'anon'), new.pass,
        new.email, coalesce(new.verified, false));
    return new;
  elsif tg_op = 'UPDATE' then
    -- no need to check clearance for old.role because
    -- an ineligible row would not even available to update (http 404)
    perform basic_auth.clearance_for_role(new.role);

    update basic_auth.users set
      email  = new.email,
      role   = new.role,
      pass   = new.pass,
      verified = coalesce(new.verified, old.verified, false)
      where email = old.email;
    return new;
  elsif tg_op = 'DELETE' then
    -- no need to check clearance for old.role (see previous case)

    delete from basic_auth.users
     where basic_auth.email = old.email;
    return null;
  end if;
end
]]></definition>
</function>

<function name="validate_user"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="email">
		<type name="text"/>
	</parameter>
	<parameter name="token">
		<type name="uuid"/>
	</parameter>
	<definition><![CDATA[
declare
  tok uuid;
begin
  if exists(select 1 from basic_auth.tokens
             where tokens.email = validate_user.email
               and tokens.token = validate_user.token
               and token_type = 'validation') then

    update basic_auth.users set verified=true
     where users.email = validate_user.email;

    delete from basic_auth.tokens
     where tokens.email = validate_user.email
       and tokens.token = validate_user.token
       and token_type = 'validation';
  else
    raise invalid_password using message =
      'invalid user or token';
  end if;

end;
]]></definition>
</function>

<table name="tokens">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<position x="2622.11" y="50"/>
	<column name="token" not-null="true">
		<type name="uuid"/>
	</column>
	<column name="token_type" not-null="true">
		<type name="public.token_type_enum"/>
	</column>
	<column name="email" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" not-null="true" default-value="('now'::text)::date">
		<type name="timestamp with time zone" with-timezone="true"/>
	</column>
	<constraint name="tokens_pkey" type="pk-constr" table="basic_auth.tokens">
		<columns names="token" ref-type="src-columns"/>
	</constraint>
</table>

<table name="users">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<position x="2999.42" y="50"/>
	<column name="email" not-null="true">
		<type name="text"/>
	</column>
	<column name="pass" not-null="true">
		<type name="text"/>
	</column>
	<column name="role" not-null="true">
		<type name="name"/>
	</column>
	<column name="verified" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="ldap_user" default-value="false">
		<type name="boolean"/>
	</column>
	<constraint name="users_email_check" type="ck-constr" table="basic_auth.users">
			<expression><![CDATA[(email ~* '^.+@.+\..+$'::text)]]></expression>
	</constraint>
	<constraint name="users_pass_check" type="ck-constr" table="basic_auth.users">
			<expression><![CDATA[(length(pass) < 512)]]></expression>
	</constraint>
	<constraint name="users_role_check" type="ck-constr" table="basic_auth.users">
			<expression><![CDATA[(length((role)::text) < 512)]]></expression>
	</constraint>
	<constraint name="users_pkey" type="pk-constr" table="basic_auth.users">
		<columns names="email" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="application_compliance_officers_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="application_compliance_officers">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="164.286" y="1143.83"/>
	<column name="id" not-null="true" sequence="public.application_compliance_officers_id_seq">
		<type name="integer"/>
	</column>
	<column name="application">
		<type name="integer"/>
	</column>
	<column name="compliance_officer">
		<type name="integer"/>
	</column>
	<column name="lead" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="complete" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="compliance_section">
		<type name="integer"/>
	</column>
	<column name="reviewed" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="application_compliance_officers_pk" type="pk-constr" table="public.application_compliance_officers">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="officer_application_uq" type="uq-constr" table="public.application_compliance_officers">
		<columns names="application,compliance_officer,compliance_section" ref-type="src-columns"/>
	</constraint>
</table>

<view name="applicationid_with_email">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="275.276" y="4466.26"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id,
    call_applications.id AS code,
    organisations.email_address AS organisation_email_address
   FROM (call_applications
     LEFT JOIN organisations ON ((call_applications.applicant = organisations.id)));]]></expression>
	</reference>
</view>

<sequence name="bank_accounts_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="bank_accounts">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Bank account details of an organisation.]]></comment>
	<position x="733.52" y="1143.83"/>
	<column name="id" not-null="true" sequence="public.bank_accounts_id_seq">
		<type name="integer"/>
	</column>
	<column name="account_number" not-null="true">
		<type name="text"/>
	</column>
	<column name="account_name">
		<type name="text"/>
	</column>
	<column name="account_type">
		<type name="text"/>
	</column>
	<column name="branch_name">
		<type name="text"/>
	</column>
	<column name="branch_code">
		<type name="text"/>
	</column>
	<column name="bank" not-null="true">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="bank_accounts_pkey" type="pk-constr" table="public.bank_accounts">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="beneficiaries_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="beneficiaries">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A milestone type is a stage in the life-cycle of a project.]]></comment>
	<position x="85.7143" y="3746.69"/>
	<column name="id" not-null="true" sequence="public.beneficiaries_id_seq">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="type" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="beneficiaries_code_uq" type="uq-constr" table="public.beneficiaries">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="beneficiaries_pk" type="pk-constr" table="public.beneficiaries">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="beneficiaries_types_type_uq" type="uq-constr" table="public.beneficiaries">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="call_evaluations_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="call_evaluations">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A call evaluation is a score given by an evaluator for a project proposal.]]></comment>
	<position x="1655.86" y="1143.83"/>
	<column name="id" not-null="true" sequence="public.call_evaluations_id_seq">
		<type name="integer"/>
	</column>
	<column name="call_application">
		<type name="integer"/>
	</column>
	<column name="score">
		<type name="integer"/>
	</column>
	<column name="remarks">
		<type name="text"/>
	</column>
	<column name="evaluator">
		<type name="integer"/>
	</column>
	<column name="evaluation_date">
		<type name="date"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="call_evaluations_pkey" type="pk-constr" table="public.call_evaluations">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="categories_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="categories">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="2129.85" y="1143.83"/>
	<column name="id" not-null="true" sequence="public.categories_id_seq">
		<type name="integer"/>
	</column>
	<column name="template">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="text"/>
	</column>
	<column name="title" not-null="true">
		<type name="text"/>
	</column>
	<column name="subtitle">
		<type name="text"/>
	</column>
	<column name="lead" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="categories_pk" type="pk-constr" table="public.categories">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="compliance_answers_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="compliance_answers">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="164.286" y="1445.03"/>
	<column name="id" not-null="true" sequence="public.compliance_answers_id_seq">
		<type name="integer"/>
	</column>
	<column name="answer" not-null="true">
		<type name="text"/>
	</column>
	<column name="application_compliance_officer">
		<type name="integer"/>
	</column>
	<column name="question">
		<type name="integer"/>
	</column>
	<column name="motivation">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="compliance_answers_pk" type="pk-constr" table="public.compliance_answers">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="compliance_answers_uq" type="uq-constr" table="public.compliance_answers">
		<columns names="application_compliance_officer,question" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="compliance_templates_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="compliance_templates">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="666.723" y="1445.03"/>
	<column name="id" not-null="true" sequence="public.compliance_templates_id_seq">
		<type name="integer"/>
	</column>
	<column name="name">
		<type name="character varying" length="255"/>
	</column>
	<column name="title">
		<type name="character varying" length="255"/>
	</column>
	<column name="subtitle">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="compliance_templates_pk" type="pk-constr" table="public.compliance_templates">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="contract_budget_items_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="project_budget">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="165" y="3371.31"/>
	<column name="id" not-null="true" sequence="public.contract_budget_items_id_seq">
		<type name="integer"/>
	</column>
	<column name="item">
		<type name="character varying" length="255"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="amount">
		<type name="numeric" length="20" precision="2"/>
	</column>
	<column name="project_partner">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="budget_pk" type="pk-constr" table="public.project_budget">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="contract_implementation_plan_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="contract_implementation_plan">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1695.72" y="1445.03"/>
	<column name="id" not-null="true" sequence="public.contract_implementation_plan_id_seq">
		<type name="integer"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="contract">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="activities_pk" type="pk-constr" table="public.contract_implementation_plan">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="contract_types_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="contract_types">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="60.6163" y="3613.6"/>
	<column name="id" not-null="true" sequence="public.contract_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="code">
		<type name="character varying" length="50"/>
	</column>
	<column name="type">
		<type name="character varying" length="255"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="contract_types_code_uq" type="uq-constr" table="public.contract_types">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="contract_types_pk" type="pk-constr" table="public.contract_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="contract_types_type_uq" type="uq-constr" table="public.contract_types">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="email_notifications_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="email_notifications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="164.286" y="1704.23"/>
	<column name="id" not-null="true" sequence="public.email_notifications_id_seq">
		<type name="integer"/>
	</column>
	<column name="email_to" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="subject">
		<type name="text"/>
	</column>
	<column name="body">
		<type name="text"/>
	</column>
	<column name="sent" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="retries" not-null="true" default-value="0">
		<type name="smallint"/>
	</column>
	<column name="failed" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="token_email" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="token">
		<type name="text"/>
	</column>
	<column name="token_type">
		<type name="text"/>
	</column>
	<column name="status_message">
		<type name="character varying" length="100"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="attachment_url">
		<type name="text"/>
	</column>
	<column name="has_attachment" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="attachment_filename">
		<type name="character varying" length="255"/>
	</column>
	<column name="attachment_filetype">
		<type name="character varying" length="5"/>
	</column>
	<constraint name="email_notifications_pkey" type="pk-constr" table="public.email_notifications">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<view name="email_notifications_not_sent">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="596.825" y="4429.11"/>
	<reference>
		<expression><![CDATA[ SELECT email_notifications.id,
    email_notifications.email_to,
    email_notifications.subject,
    email_notifications.body,
    email_notifications.sent,
    email_notifications.retries,
    email_notifications.failed,
    email_notifications.token_email,
    email_notifications.token,
    email_notifications.token_type
   FROM email_notifications
  WHERE ((email_notifications.failed = false) AND (email_notifications.sent = false));]]></expression>
	</reference>
</view>

<view name="email_notifications_to_json">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="875.302" y="4426.26"/>
	<reference>
		<expression><![CDATA[ SELECT row_to_json(t.*) AS row_to_json
   FROM ( SELECT email_notifications.id,
            email_notifications.email_to,
            email_notifications.subject,
            email_notifications.body,
            email_notifications.sent,
            email_notifications.retries,
            email_notifications.failed,
            email_notifications.token_email,
            email_notifications.token,
            email_notifications.token_type,
            email_notifications.status_message,
            email_notifications.created_at,
            email_notifications.created_by,
            email_notifications.updated_at,
            email_notifications.updated_by,
            email_notifications.attachment_url,
            email_notifications.has_attachment,
            email_notifications.attachment_filename,
            email_notifications.attachment_filetype
           FROM email_notifications
          WHERE ((email_notifications.failed = false) AND (email_notifications.sent = false))) t;]]></expression>
	</reference>
</view>

<sequence name="evaluation_committee_meeting_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="approval_meetings">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="655.098" y="1704.23"/>
	<column name="id" not-null="true" sequence="public.evaluation_committee_meeting_id_seq">
		<type name="integer"/>
	</column>
	<column name="meeting_date" not-null="true">
		<type name="timestamp"/>
	</column>
	<column name="name">
		<type name="text"/>
	</column>
	<column name="approval_meeting_type">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="evaluation_committee_meeting_pk" type="pk-constr" table="public.approval_meetings">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="evc_has_applications_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<sequence name="evc_attendees_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="evc_attendees">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1270.95" y="1469.94"/>
	<column name="id" not-null="true" sequence="public.evc_attendees_id_seq">
		<type name="integer"/>
	</column>
	<column name="attendee">
		<type name="integer"/>
	</column>
	<column name="evc">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="evc_attendees_pk" type="pk-constr" table="public.evc_attendees">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="evc_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1147.71" y="1704.23"/>
	<column name="id" not-null="true" sequence="public.evc_has_applications_id_seq">
		<type name="integer"/>
	</column>
	<column name="application">
		<type name="integer"/>
	</column>
	<column name="evc">
		<type name="integer"/>
	</column>
	<column name="decision_narrative">
		<type name="text"/>
	</column>
	<column name="decision_timestamp">
		<type name="timestamp"/>
	</column>
	<column name="amount_approved">
		<type name="numeric" length="20" precision="2"/>
	</column>
	<column name="approved" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="evc_has_applications_pk" type="pk-constr" table="public.evc_applications">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="evc_has_applications_uq" type="uq-constr" table="public.evc_applications">
		<columns names="application,evc" ref-type="src-columns"/>
	</constraint>
</table>

<view name="grid_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1166.59" y="4471.97"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id,
    calls.call_reference,
    organisations.name,
    organisations.email_address,
    call_applications.pmu_advisory,
    call_application_statuses.description,
    call_applications.application_status
   FROM (((call_applications
     LEFT JOIN organisations ON ((call_applications.applicant = organisations.id)))
     LEFT JOIN calls ON ((call_applications.call = calls.id)))
     LEFT JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)))
  WHERE (call_applications.application_status > 0);]]></expression>
	</reference>
</view>

<view name="grid_calls">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="237.143" y="4356.51"/>
	<reference>
		<expression><![CDATA[ SELECT calls.id,
    calls.call_reference,
    calls.name,
    key_performance_indicators.code AS programme_code,
    key_result_areas.code AS kra_code,
    programmes.code AS kpi_code
   FROM (((calls
     LEFT JOIN key_performance_indicators ON ((calls.key_performance_indicator = key_performance_indicators.id)))
     LEFT JOIN key_result_areas ON ((key_performance_indicators.key_result_area = key_result_areas.id)))
     LEFT JOIN programmes ON ((key_result_areas.programme = programmes.id)));]]></expression>
	</reference>
</view>

<sequence name="persons_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="persons">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A person is a member of staff or contact person in an organisation.]]></comment>
	<position x="817.884" y="2715.66"/>
	<column name="id" not-null="true" sequence="public.persons_id_seq">
		<type name="integer"/>
	</column>
	<column name="id_no">
		<type name="character varying" length="255"/>
	</column>
	<column name="last_name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="first_names">
		<type name="character varying" length="255"/>
	</column>
	<column name="cell_phone">
		<type name="character varying" length="255"/>
	</column>
	<column name="work_phone">
		<type name="character varying" length="255"/>
	</column>
	<column name="email_address">
		<type name="character varying" length="255"/>
	</column>
	<column name="job_title">
		<type name="integer"/>
	</column>
	<column name="personal_title">
		<type name="integer"/>
	</column>
	<column name="employer">
		<type name="integer"/>
	</column>
	<column name="application_user" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="login_email">
		<type name="character varying" length="255"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="persons_pkey" type="pk-constr" table="public.persons">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<view name="grid_compliance_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="314.803" y="4390.8"/>
	<reference>
		<expression><![CDATA[ SELECT application_compliance_officers.id,
    application_compliance_officers.application,
    application_compliance_officers.compliance_officer,
    persons.first_names,
    persons.last_name,
    persons.email_address,
    calls.call_reference,
    organisations.name,
    provinces.name AS province,
    application_compliance_officers.lead,
    calls.admin_compliance_template,
    calls.relevance_compliance_template,
    calls.assessment_compliance_template,
    application_compliance_officers.complete,
    application_compliance_officers.compliance_section,
    call_applications.application_status,
    call_application_statuses.description AS application_status_description,
    calls.due_diligence_compliance_template
   FROM ((((((application_compliance_officers
     JOIN call_applications ON ((application_compliance_officers.application = call_applications.id)))
     JOIN organisations ON ((call_applications.applicant = organisations.id)))
     JOIN calls ON ((call_applications.call = calls.id)))
     JOIN persons ON ((application_compliance_officers.compliance_officer = persons.id)))
     LEFT JOIN provinces ON ((organisations.street_province = provinces.id)))
     JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)));]]></expression>
	</reference>
</view>

<view name="grid_evc">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="468.086" y="4567.94"/>
	<reference>
		<expression><![CDATA[ SELECT approval_meetings.id,
    approval_meetings.meeting_date,
    approval_meetings.name
   FROM approval_meetings;]]></expression>
	</reference>
</view>

<view name="grid_evc_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="763.104" y="4546.51"/>
	<reference>
		<expression><![CDATA[ SELECT evc_applications.id,
    evc_applications.application,
    evc_applications.decision_timestamp,
    evc_applications.amount_approved,
    evc_applications.approved,
    organisations.name AS organisation,
    evc_applications.evc,
    call_application_statuses.status AS application_status,
    call_application_statuses.description AS application_status_description
   FROM (((evc_applications
     JOIN call_applications ON ((evc_applications.application = call_applications.id)))
     JOIN organisations ON ((call_applications.applicant = organisations.id)))
     JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)));]]></expression>
	</reference>
</view>

<view name="grid_evc_attendees">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1032.93" y="4565.09"/>
	<reference>
		<expression><![CDATA[ SELECT evc_attendees.id,
    persons.first_names,
    persons.last_name,
    persons.email_address,
    persons.employer,
    evc_attendees.evc
   FROM (evc_attendees
     JOIN persons ON ((evc_attendees.attendee = persons.id)));]]></expression>
	</reference>
</view>

<view name="grid_kpis">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="345.714" y="4486.77"/>
	<reference>
		<expression><![CDATA[ SELECT key_performance_indicators.id,
    programmes.code AS programme_code,
    key_result_areas.code AS kra_code,
    key_performance_indicators.code,
    key_performance_indicators.name,
    key_performance_indicators.description
   FROM ((key_performance_indicators
     LEFT JOIN key_result_areas ON ((key_performance_indicators.key_result_area = key_result_areas.id)))
     JOIN programmes ON ((key_result_areas.programme = programmes.id)));]]></expression>
	</reference>
</view>

<view name="grid_kras">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="358.002" y="4562.49"/>
	<reference>
		<expression><![CDATA[ SELECT key_result_areas.id,
    programmes.code AS programme_code,
    key_result_areas.code,
    key_result_areas.name,
    key_result_areas.description
   FROM (programmes
     RIGHT JOIN key_result_areas ON ((key_result_areas.programme = programmes.id)));]]></expression>
	</reference>
</view>

<sequence name="organisation_statuses_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="organisation_statuses">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[The status of an organisation.]]></comment>
	<position x="164.286" y="2103.43"/>
	<column name="id" not-null="true" sequence="public.organisation_statuses_id_seq">
		<type name="integer"/>
	</column>
	<column name="status" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="organisation_statuses_pkey" type="pk-constr" table="public.organisation_statuses">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="organisation_statuses_status_uq" type="uq-constr" table="public.organisation_statuses">
		<columns names="status" ref-type="src-columns"/>
	</constraint>
</table>

<view name="grid_org_statuses">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="585.517" y="4485.34"/>
	<reference>
		<expression><![CDATA[ SELECT organisation_statuses.id,
    organisation_statuses.status,
    organisation_statuses.description
   FROM organisation_statuses;]]></expression>
	</reference>
</view>

<sequence name="organisation_types_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="organisation_types">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[An organisation type describes nature of the institution, such as Funder, Grantee, Partner, Government Department and so on.]]></comment>
	<position x="673.536" y="2103.43"/>
	<column name="id" not-null="true" sequence="public.organisation_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="type" not-null="true">
		<type name="text"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="organisation_types_pkey" type="pk-constr" table="public.organisation_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="organisation_types_type_uq" type="uq-constr" table="public.organisation_types">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<view name="grid_org_types">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="754.916" y="4559.63"/>
	<reference>
		<expression><![CDATA[ SELECT organisation_types.id,
    organisation_types.type,
    organisation_types.description
   FROM organisation_types;]]></expression>
	</reference>
</view>

<view name="users">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1021.04" y="4505.34"/>
	<reference>
		<expression><![CDATA[ SELECT actual.role,
    '***'::text AS pass,
    actual.email,
    actual.verified
   FROM basic_auth.users actual,
    ( SELECT pg_authid.rolname
           FROM pg_authid
          WHERE pg_has_role("current_user"(), pg_authid.oid, 'member'::text)) member_of
  WHERE ((actual.role = member_of.rolname) AND ((actual.role <> 'anon'::name) OR (actual.email = basic_auth.current_email())));]]></expression>
	</reference>
</view>

<view name="grid_places">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="231.429" y="4457.03"/>
	<reference>
		<expression><![CDATA[ SELECT places.id,
    places.name,
    provinces.name AS province
   FROM (places
     LEFT JOIN provinces ON ((places.province = provinces.id)));]]></expression>
	</reference>
</view>

<view name="grid_programmes">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="377.035" y="4471.31"/>
	<reference>
		<expression><![CDATA[ SELECT programmes.id,
    programmes.code,
    programmes.name,
    programmes.description,
    programmes.start_date,
    programmes.end_date
   FROM programmes;]]></expression>
	</reference>
</view>

<view name="grid_provinces">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="605.566" y="4452.74"/>
	<reference>
		<expression><![CDATA[ SELECT provinces.id,
    provinces.code,
    provinces.name
   FROM provinces;]]></expression>
	</reference>
</view>

<view name="grid_suburbs">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="776.836" y="4462.74"/>
	<reference>
		<expression><![CDATA[ SELECT suburbs.id,
    suburbs.name,
    places.name AS place,
    provinces.name AS province,
    suburbs.street_code,
    suburbs.po_box_code
   FROM ((suburbs
     LEFT JOIN places ON ((suburbs.place = places.id)))
     LEFT JOIN provinces ON ((suburbs.province = provinces.id)));]]></expression>
	</reference>
</view>

<sequence name="job_titles_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="job_titles">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[The job title of a person.]]></comment>
	<position x="1742.49" y="2106.29"/>
	<column name="id" not-null="true" sequence="public.job_titles_id_seq">
		<type name="integer"/>
	</column>
	<column name="title" not-null="true">
		<type name="text"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="job_titles_pkey" type="pk-constr" table="public.job_titles">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="job_titles_title_uq" type="uq-constr" table="public.job_titles">
		<columns names="title" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="key_performance_indicators_targets_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="key_performance_indicators_targets">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1898.84" y="4437.71"/>
	<column name="id" not-null="true" sequence="public.key_performance_indicators_targets_id_seq">
		<type name="integer"/>
	</column>
	<column name="month" not-null="true">
		<type name="date"/>
	</column>
	<column name="target">
		<type name="text"/>
	</column>
	<column name="actual">
		<type name="text"/>
	</column>
	<column name="key_performance_indicator">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="key_performance_indicators_targets_pk" type="pk-constr" table="public.key_performance_indicators_targets">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="key_performance_indicators_targets_uq" type="uq-constr" table="public.key_performance_indicators_targets">
		<columns names="key_performance_indicator,month" ref-type="src-columns"/>
	</constraint>
</table>

<view name="kpi_next_call_reference">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1048.18" y="4458.46"/>
	<reference>
		<expression><![CDATA[ SELECT m.kpi_id,
    ((m.next_call_reference || '/'::text) || to_char((m.count_kpi_calls + 1), 'FM00'::text)) AS next_call_reference
   FROM ( SELECT key_performance_indicators.id AS kpi_id,
            (((((programmes.code)::text || '/'::text) || (key_result_areas.code)::text) || '/'::text) || (key_performance_indicators.code)::text) AS next_call_reference,
            count(calls.id) AS count_kpi_calls
           FROM (((key_performance_indicators
             LEFT JOIN calls ON ((key_performance_indicators.id = calls.key_performance_indicator)))
             LEFT JOIN key_result_areas ON ((key_performance_indicators.key_result_area = key_result_areas.id)))
             LEFT JOIN programmes ON ((key_result_areas.programme = programmes.id)))
          GROUP BY (((((programmes.code)::text || '/'::text) || (key_result_areas.code)::text) || '/'::text) || (key_performance_indicators.code)::text), key_performance_indicators.id) m;]]></expression>
	</reference>
</view>

<view name="ldap_users">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="251.429" y="4417.29"/>
	<reference>
		<expression><![CDATA[ SELECT users.email,
    users.role,
    users.verified,
    users.ldap_user,
    persons.id AS person_id
   FROM (basic_auth.users
     LEFT JOIN persons ON ((users.email = (persons.login_email)::text)))
  WHERE ((users.verified = true) AND (users.ldap_user = true));]]></expression>
	</reference>
</view>

<view name="lookup_calls">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="397.415" y="4393"/>
	<reference>
		<expression><![CDATA[ SELECT calls.id,
    calls.call_reference AS code,
    calls.name
   FROM calls;]]></expression>
	</reference>
</view>

<view name="lookup_evc_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="572.218" y="4380.14"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id AS application,
    calls.call_reference,
    call_applications.amount AS amount_applied,
    organisations.name
   FROM ((call_applications
     JOIN organisations ON ((call_applications.applicant = organisations.id)))
     JOIN calls ON ((call_applications.call = calls.id)))
  WHERE ((call_applications.application_status > 5) AND (call_applications.application_status < 13));]]></expression>
	</reference>
</view>

<view name="lookup_programmes">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="810.532" y="4424.43"/>
	<reference>
		<expression><![CDATA[ SELECT programmes.id,
    programmes.code,
    programmes.name
   FROM programmes;]]></expression>
	</reference>
</view>

<view name="lookup_roles">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1047.63" y="4394.43"/>
	<reference>
		<expression><![CDATA[ SELECT pg_roles.rolname
   FROM pg_roles
  WHERE (pg_roles.rolname <> 'postgres'::name);]]></expression>
	</reference>
</view>

<sequence name="milestone_types_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="milestone_types">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A milestone type is a stage in the life-cycle of a project.]]></comment>
	<position x="2193.8" y="2103.43"/>
	<column name="id" not-null="true" sequence="public.milestone_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="type" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="milestone_types_code_uq" type="uq-constr" table="public.milestone_types">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="milestone_types_pkey" type="pk-constr" table="public.milestone_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="milestone_types_type_uq" type="uq-constr" table="public.milestone_types">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="organisation_bank_accounts_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="organisation_bank_accounts">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="154.286" y="2309.77"/>
	<column name="id" not-null="true" sequence="public.organisation_bank_accounts_id_seq">
		<type name="integer"/>
	</column>
	<column name="ogranisation">
		<type name="integer"/>
	</column>
	<column name="bankaccount">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="organisation_bank_accounts_pk" type="pk-constr" table="public.organisation_bank_accounts">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="payment_schedule_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="payment_schedule">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="54.2861" y="2897.49"/>
	<column name="id" not-null="true" sequence="public.payment_schedule_id_seq">
		<type name="integer"/>
	</column>
	<column name="tranche" not-null="true">
		<type name="integer"/>
	</column>
	<column name="amount" not-null="true">
		<type name="numeric" length="20" precision="2"/>
	</column>
	<column name="payment_date" not-null="true">
		<type name="date"/>
	</column>
	<column name="contract">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="payment_schedule_pk" type="pk-constr" table="public.payment_schedule">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="payment_types_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="payment_types">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="702.357" y="2498.34"/>
	<column name="id" not-null="true" sequence="public.payment_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="code">
		<type name="character varying" length="50"/>
	</column>
	<column name="type">
		<type name="character varying" length="255"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="payment_types_code_uq" type="uq-constr" table="public.payment_types">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="payment_types_pk" type="pk-constr" table="public.payment_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="payment_types_type_uq" type="uq-constr" table="public.payment_types">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="person_bank_accounts_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="person_bank_accounts">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1051.48" y="1789.77"/>
	<column name="id" not-null="true" sequence="public.person_bank_accounts_id_seq">
		<type name="integer"/>
	</column>
	<column name="bankaccount">
		<type name="integer"/>
	</column>
	<column name="person">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="person_bank_accounts_pk" type="pk-constr" table="public.person_bank_accounts">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="personal_titles_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="personal_titles">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[The title of a person used in the salutation.]]></comment>
	<position x="2189" y="2362.63"/>
	<column name="id" not-null="true" sequence="public.personal_titles_id_seq">
		<type name="integer"/>
	</column>
	<column name="title" not-null="true">
		<type name="text"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="personal_titles_pkey" type="pk-constr" table="public.personal_titles">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="personal_titles_title_key" type="uq-constr" table="public.personal_titles">
		<columns names="title" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="project_beneficiaries_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="project_beneficiaries">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="728.858" y="3901.4"/>
	<column name="id" not-null="true" sequence="public.project_beneficiaries_id_seq">
		<type name="integer"/>
	</column>
	<column name="beneficiary">
		<type name="integer"/>
	</column>
	<column name="project">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="project_beneficiaries_pk" type="pk-constr" table="public.project_beneficiaries">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="project_beneficiaries_uq" type="uq-constr" table="public.project_beneficiaries">
		<columns names="beneficiary,project" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="project_contracts_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="project_contracts">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="121.285" y="3152.25"/>
	<column name="id" not-null="true" sequence="public.project_contracts_id_seq">
		<type name="integer"/>
	</column>
	<column name="project_partner" not-null="true">
		<type name="integer"/>
	</column>
	<column name="contract_type">
		<type name="integer"/>
	</column>
	<column name="person">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="project_contracts_pk" type="pk-constr" table="public.project_contracts">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="project_expenses_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="project_expenses">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Project expenses are incurred by project activities]]></comment>
	<position x="114.466" y="2618.55"/>
	<column name="id" not-null="true" sequence="public.project_expenses_id_seq">
		<type name="integer"/>
	</column>
	<column name="project" not-null="true">
		<type name="integer"/>
	</column>
	<column name="payment_reference" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="amount">
		<type name="numeric" length="20" precision="2"/>
	</column>
	<column name="payment_type">
		<type name="integer"/>
	</column>
	<column name="organisation">
		<type name="integer"/>
	</column>
	<column name="person">
		<type name="integer"/>
	</column>
	<column name="payment_schedule">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="project_expenses_pkey" type="pk-constr" table="public.project_expenses">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="project_milestones_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="project_milestones">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A project milestone is a record of the milestones of a project.]]></comment>
	<position x="2144.64" y="2810.4"/>
	<column name="id" not-null="true" sequence="public.project_milestones_id_seq">
		<type name="integer"/>
	</column>
	<column name="project" not-null="true">
		<type name="integer"/>
	</column>
	<column name="milestone_type" not-null="true">
		<type name="integer"/>
	</column>
	<column name="milestone_date">
		<type name="date"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="project_milestones_pkey" type="pk-constr" table="public.project_milestones">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="project_outputs_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="project_outputs">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Project outputs are produced by project activities and may support a KPI]]></comment>
	<position x="2122.97" y="2621.83"/>
	<column name="id" not-null="true" sequence="public.project_outputs_id_seq">
		<type name="integer"/>
	</column>
	<column name="project" not-null="true">
		<type name="integer"/>
	</column>
	<column name="key_performance_indicator">
		<type name="integer"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="project_outputs_pkey" type="pk-constr" table="public.project_outputs">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="project_statuses_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="project_statuses">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[The status of a project.]]></comment>
	<position x="35.7143" y="3955.6"/>
	<column name="id" not-null="true" sequence="public.project_statuses_id_seq">
		<type name="integer"/>
	</column>
	<column name="status" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="project_statuses_pkey" type="pk-constr" table="public.project_statuses">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="project_statuses_status_uq" type="uq-constr" table="public.project_statuses">
		<columns names="status" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="project_types_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="project_types">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A project type is one of Discretionary, Own, etc.]]></comment>
	<position x="534.286" y="4065.6"/>
	<column name="id" not-null="true" sequence="public.project_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="type" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="project_types_code_uq" type="uq-constr" table="public.project_types">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="project_types_pkey" type="pk-constr" table="public.project_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="project_types_type_uq" type="uq-constr" table="public.project_types">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="projects_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="projects">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A project is a set of activities that may contribute to a KPI, or other objective.]]></comment>
	<position x="1433.44" y="3122.46"/>
	<column name="id" not-null="true" sequence="public.projects_id_seq">
		<type name="integer"/>
	</column>
	<column name="project_code" not-null="true">
		<type name="text"/>
	</column>
	<column name="name" not-null="true">
		<type name="text"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="project_officer" not-null="true">
		<type name="integer"/>
	</column>
	<column name="start_date">
		<type name="date"/>
	</column>
	<column name="end_date">
		<type name="date"/>
	</column>
	<column name="overall_budget">
		<type name="numeric" length="20" precision="2"/>
	</column>
	<column name="call_application">
		<type name="integer"/>
	</column>
	<column name="key_performance_indicator">
		<type name="integer"/>
	</column>
	<column name="place">
		<type name="integer"/>
	</column>
	<column name="latest_milestone">
		<type name="integer"/>
	</column>
	<column name="project_type" not-null="true">
		<type name="integer"/>
	</column>
	<column name="project_status" not-null="true">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="projects_pkey" type="pk-constr" table="public.projects">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="projects_project_code_uq" type="uq-constr" table="public.projects">
		<columns names="project_code" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="question_options_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="question_options">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="2353" y="3221.31"/>
	<column name="id" not-null="true" sequence="public.question_options_id_seq">
		<type name="integer"/>
	</column>
	<column name="option">
		<type name="text"/>
	</column>
	<column name="question">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="question_options_pk" type="pk-constr" table="public.question_options">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="question_types_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="question_types">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="2037.32" y="2937.03"/>
	<column name="id" not-null="true" sequence="public.question_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="code">
		<type name="character varying" length="50"/>
	</column>
	<column name="type">
		<type name="character varying" length="255"/>
	</column>
	<column name="angular_control">
		<type name="character varying" length="50"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="question_types_code_uq" type="uq-constr" table="public.question_types">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="question_types_pk" type="pk-constr" table="public.question_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="question_types_type_uq" type="uq-constr" table="public.question_types">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="questions_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="questions">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="2438.57" y="3473.37"/>
	<column name="id" not-null="true" sequence="public.questions_id_seq">
		<type name="integer"/>
	</column>
	<column name="question">
		<type name="text"/>
	</column>
	<column name="weight" not-null="true" default-value="0.01">
		<type name="real"/>
	</column>
	<column name="has_options" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="catergory">
		<type name="integer"/>
	</column>
	<column name="type">
		<type name="integer"/>
	</column>
	<column name="lead_question" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="has_motivation" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="is_scoring" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="max_scoring" not-null="true" default-value="0">
		<type name="real"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="question_number">
		<type name="integer"/>
	</column>
	<column name="required" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="questions_pk" type="pk-constr" table="public.questions">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<view name="reporting_assessment">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="164.286" y="4231.83"/>
	<reference>
		<expression><![CDATA[ SELECT compliance_templates.name AS "comName",
    compliance_templates.title AS "comTitle",
    compliance_templates.subtitle AS "comSubTitle",
    categories.name AS "catName",
    categories.title AS "catTitle",
    categories.subtitle AS "catSubTitle",
    questions.question,
    questions.weight,
    questions.has_options,
    questions.catergory,
    questions.type,
    questions.lead_question,
    questions.has_motivation,
    questions.is_scoring,
    questions.max_scoring,
    questions.description,
    compliance_answers.answer,
    compliance_answers.motivation,
    persons.id AS "officerId",
    persons.first_names,
    persons.last_name,
    application_compliance_officers.id AS "appComplianceOfficerId"
   FROM (((((categories
     LEFT JOIN compliance_templates ON ((categories.template = compliance_templates.id)))
     LEFT JOIN questions ON ((questions.catergory = categories.id)))
     LEFT JOIN compliance_answers ON ((compliance_answers.question = questions.id)))
     LEFT JOIN application_compliance_officers ON ((compliance_answers.application_compliance_officer = application_compliance_officers.id)))
     LEFT JOIN persons ON ((application_compliance_officers.compliance_officer = persons.id)));]]></expression>
	</reference>
</view>

<index name="organisation_code_ix" table="public.organisations"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="code"/>
		</idxelement>
</index>

<index name="person_id_no_ix" table="public.persons"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="id_no"/>
		</idxelement>
</index>

<index name="place_name_ix" table="public.places"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="name"/>
		</idxelement>
</index>

<index name="province_code_ix" table="public.provinces"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="code"/>
		</idxelement>
</index>

<trigger name="encrypt_pass" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="basic_auth.users">
		<function signature="basic_auth.encrypt_pass()"/>
</trigger>

<trigger name="ensure_user_role_exists" firing-type="AFTER" per-line="true" constraint="true"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="basic_auth.users">
		<function signature="basic_auth.check_role_exists()"/>
</trigger>

<trigger name="send_validation" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="basic_auth.users">
		<function signature="basic_auth.send_validation()"/>
</trigger>

<trigger name="genorgcode" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.organisations">
		<function signature="public.genorgcode()"/>
</trigger>

<sequence name="submission_types_id_seq"
	 start="2" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="submission_types">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[A submission type is one of Email, Physical, etc.]]></comment>
	<position x="1476.14" y="4423.37"/>
	<column name="id" not-null="true" sequence="public.submission_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="type" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description" not-null="true">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="submission_types_pkey" type="pk-constr" table="public.submission_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="submission_types_code_uq" type="uq-constr" table="public.submission_types">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="submission_types_type_uq" type="uq-constr" table="public.submission_types">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<view name="rpc_alfresco_get_submission_types">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="371.093" y="4568.97"/>
	<reference>
		<expression><![CDATA[ SELECT submission_types.id AS "submissionTypeId",
    submission_types.code AS "submissionTypeCode",
    submission_types.type AS "submissionTypeName"
   FROM submission_types;]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_submission_types" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="submissionTypeId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="submissionTypeCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="submissionTypeName">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_submission_types"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_submission_types"/>
	</return-type>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
        RETURN QUERY SELECT * FROM rpc_alfresco_get_submission_types 
	ORDER BY
		rpc_alfresco_get_submission_types."submissionTypeName";
        

	--EXCEPTION WHEN OTHERS THEN 
	--RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<view name="rpc_alfresco_get_cities">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="718.8" y="4447.54"/>
	<reference>
		<expression><![CDATA[ SELECT rpc_alfresco_get_places."placesId" AS "cityId",
    (rpc_alfresco_get_places."placesId")::text AS "cityCode",
    rpc_alfresco_get_places."placesName" AS "cityName",
    rpc_alfresco_get_places."provinceId",
    rpc_alfresco_get_places."provinceCode",
    rpc_alfresco_get_places."provinceName"
   FROM rpc_alfresco_get_places
  ORDER BY rpc_alfresco_get_places."placesName";]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_cities" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="cityId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="cityCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="cityName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="provinceId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="provinceCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="provinceName">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_cities"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_cities"/>
	</return-type>
	<parameter name="provinceId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="provinceCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
		
        RETURN QUERY SELECT * FROM rpc_alfresco_get_cities 
	WHERE 
	 	rpc_alfresco_get_cities."provinceId" = COALESCE(alfresco_get_cities."provinceId",rpc_alfresco_get_cities."provinceId")
	AND 	rpc_alfresco_get_cities."provinceCode" = COALESCE(alfresco_get_cities."provinceCode",rpc_alfresco_get_cities."provinceCode")
	ORDER BY rpc_alfresco_get_cities."provinceCode";
        
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<view name="grid_pmu_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="967.715" y="4483.26"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id,
    calls.call_reference,
    organisations.name,
    organisations.email_address,
    call_applications.pmu_advisory,
    call_applications.application_status,
    call_application_statuses.description AS application_status_description
   FROM (((call_applications
     LEFT JOIN organisations ON ((call_applications.applicant = organisations.id)))
     LEFT JOIN calls ON ((call_applications.call = calls.id)))
     JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)))
  WHERE ((call_applications.application_status > 4) AND (call_applications.application_status < 13));]]></expression>
	</reference>
</view>

<view name="grid_assigned_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1232.68" y="4530.4"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id AS application,
    application_compliance_officers.id,
    application_compliance_officers.compliance_officer,
    persons.first_names,
    persons.last_name,
    persons.email_address,
    calls.call_reference,
    organisations.name,
    provinces.name AS province,
    application_compliance_officers.lead,
    calls.admin_compliance_template,
    calls.relevance_compliance_template,
    calls.assessment_compliance_template,
    application_compliance_officers.complete,
    application_compliance_officers.compliance_section,
    call_application_statuses.status AS application_status,
    call_application_statuses.description AS application_status_description
   FROM ((((((application_compliance_officers
     LEFT JOIN call_applications ON ((application_compliance_officers.application = call_applications.id)))
     LEFT JOIN organisations ON ((call_applications.applicant = organisations.id)))
     LEFT JOIN calls ON ((call_applications.call = calls.id)))
     LEFT JOIN persons ON ((application_compliance_officers.compliance_officer = persons.id)))
     LEFT JOIN provinces ON ((organisations.street_province = provinces.id)))
     JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)));]]></expression>
	</reference>
</view>

<view name="grid_persons">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="170" y="4389.23"/>
	<reference>
		<expression><![CDATA[ SELECT persons.id,
    persons.id_no,
    persons.last_name,
    persons.first_names,
    persons.cell_phone,
    persons.work_phone,
    persons.email_address,
    persons.job_title,
    persons.personal_title,
    persons.employer,
    persons.application_user,
    users.email AS user_login,
    users.role,
    personal_titles.title
   FROM ((persons
     LEFT JOIN users ON (((persons.login_email)::text = users.email)))
     LEFT JOIN personal_titles ON ((persons.personal_title = personal_titles.id)));]]></expression>
	</reference>
</view>

<view name="rpc_alfresco_get_suburbs">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="376.058" y="4516.37"/>
	<reference>
		<expression><![CDATA[ SELECT suburbs.id AS "suburbId",
    suburbs.name AS "suburbName",
    (suburbs.id)::text AS "suburbCode",
    places.id AS "placeId",
    places.name AS "placeName",
    suburbs.po_box_code AS "suburbPOBoxCode",
    suburbs.street_code AS "suburbStreetCode",
    suburbs.latitude AS "suburbLatitude",
    suburbs.longitude AS "subutbLongitude"
   FROM (suburbs
     JOIN places ON ((suburbs.place = places.id)))
  ORDER BY suburbs.name;]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_suburbs" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="suburbId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="suburbName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="suburbCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="placeId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="placeName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="suburbPOBoxCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="suburbStreetCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="suburbLatitude">
		<type name="real"/>
	</typeattrib>
	<typeattrib name="subutbLongitude">
		<type name="real"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_suburbs"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_suburbs"/>
	</return-type>
	<parameter name="cityId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="cityCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
	RETURN QUERY SELECT * FROM rpc_alfresco_get_suburbs 
	WHERE 
	 	rpc_alfresco_get_suburbs."placeId" = COALESCE(alfresco_get_suburbs."cityId"                   , rpc_alfresco_get_suburbs."placeId")
	AND 	rpc_alfresco_get_suburbs."placeId" = COALESCE(CAST(alfresco_get_suburbs."cityCode" as integer), rpc_alfresco_get_suburbs."placeId")
	ORDER BY rpc_alfresco_get_suburbs."suburbName"; 
        

--	EXCEPTION WHEN OTHERS THEN /*Catch all*/
--	RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<view name="rpc_alfresco_get_organisations">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="654.479" y="4504.94"/>
	<reference>
		<expression><![CDATA[ SELECT organisations.id AS "organisationId",
    organisations.code AS "organisationCode",
    organisations.name AS "organisationName",
    organisations.npo_no AS "organisationNPONumber",
    organisations.contact_person AS "organisationContactFullName",
    organisations.cell_phone AS "organisationContactCellphoneNumber",
    organisations.email_address AS "organisationEmailAddress",
    organisations.work_phone AS "organisationTelephoneNumber",
    organisations.fax_no AS "organisationFaxNumber",
    organisations.street_first_line AS "organisationPhysicalAddressLine1",
    organisations.street_second_line AS "organisationPhysicalAddressLine2",
    (organisations.street_suburb)::text AS "organisationPhysicalAddressSuburbCode",
    (organisations.street_place)::text AS "organisationPhysicalAddressCityCode",
    (organisations.street_province)::text AS "organisationPhysicalAddressProvinceCode",
    organisations.postal_first_line AS "organisationPostalAddressLine1",
    organisations.postal_second_line AS "organisationPostalAddressLine2"
   FROM (organisations
     LEFT JOIN suburbs ON ((organisations.street_suburb = suburbs.id)))
  ORDER BY organisations.name;]]></expression>
	</reference>
</view>

<view name="rpc_alfresco_create_application">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="973.789" y="4529.23"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id AS "projectId",
    call_applications.id AS "projectCode",
    call_applications.title AS "projectTitle",
    programmes.id AS "programmeId",
    programmes.code AS "programmeCode",
    programmes.name AS "programmeName",
    calls.id AS "callId",
    calls.call_reference_path_safe AS "callCode",
    calls.name AS "callName",
    rpc_alfresco_get_organisations."organisationId",
    rpc_alfresco_get_organisations."organisationCode",
    rpc_alfresco_get_organisations."organisationName",
    rpc_alfresco_get_organisations."organisationContactFullName",
    rpc_alfresco_get_organisations."organisationContactCellphoneNumber",
    rpc_alfresco_get_organisations."organisationEmailAddress",
    rpc_alfresco_get_organisations."organisationTelephoneNumber",
    rpc_alfresco_get_organisations."organisationFaxNumber",
    rpc_alfresco_get_organisations."organisationPhysicalAddressLine1",
    rpc_alfresco_get_organisations."organisationPhysicalAddressLine2",
    rpc_alfresco_get_organisations."organisationPhysicalAddressProvinceCode",
    rpc_alfresco_get_organisations."organisationPhysicalAddressCityCode",
    rpc_alfresco_get_organisations."organisationPhysicalAddressSuburbCode",
    rpc_alfresco_get_organisations."organisationPostalAddressLine1",
    rpc_alfresco_get_organisations."organisationPostalAddressLine2"
   FROM (((((call_applications
     LEFT JOIN calls ON ((call_applications.call = calls.id)))
     LEFT JOIN key_performance_indicators ON ((key_performance_indicators.id = calls.key_performance_indicator)))
     LEFT JOIN key_result_areas ON ((key_performance_indicators.key_result_area = key_result_areas.id)))
     LEFT JOIN programmes ON ((key_result_areas.programme = programmes.id)))
     JOIN rpc_alfresco_get_organisations ON ((call_applications.applicant = rpc_alfresco_get_organisations."organisationId")));]]></expression>
	</reference>
</view>

<view name="rpc_alfresco_get_projects">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1218.03" y="4487.8"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id AS "projectId",
    (call_applications.id)::text AS "projectCode",
    call_applications.title AS "projectTitle",
    rpc_alfresco_get_calls."programmeId",
    rpc_alfresco_get_calls."programmeCode",
    rpc_alfresco_get_calls."programmeName",
    rpc_alfresco_get_calls."callId",
    rpc_alfresco_get_calls."callCode",
    rpc_alfresco_get_calls."callName",
    rpc_alfresco_get_organisations."organisationId",
    rpc_alfresco_get_organisations."organisationCode",
    rpc_alfresco_get_organisations."organisationName",
    rpc_alfresco_get_organisations."organisationContactFullName",
    rpc_alfresco_get_organisations."organisationContactCellphoneNumber",
    rpc_alfresco_get_organisations."organisationEmailAddress",
    rpc_alfresco_get_organisations."organisationTelephoneNumber",
    rpc_alfresco_get_organisations."organisationFaxNumber",
    rpc_alfresco_get_organisations."organisationPhysicalAddressLine1",
    rpc_alfresco_get_organisations."organisationPhysicalAddressLine2",
    rpc_alfresco_get_organisations."organisationPhysicalAddressProvinceCode",
    rpc_alfresco_get_organisations."organisationPhysicalAddressCityCode",
    rpc_alfresco_get_organisations."organisationPhysicalAddressSuburbCode",
    rpc_alfresco_get_organisations."organisationPostalAddressLine1",
    rpc_alfresco_get_organisations."organisationPostalAddressLine2",
    call_application_statuses.id AS "projectStatusId",
    call_application_statuses.status AS "projectStatusCode",
    call_application_statuses.description AS "projectStatusName"
   FROM (((call_applications
     LEFT JOIN rpc_alfresco_get_calls ON ((call_applications.call = rpc_alfresco_get_calls."callId")))
     LEFT JOIN rpc_alfresco_get_organisations ON ((call_applications.applicant = rpc_alfresco_get_organisations."organisationId")))
     LEFT JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)))
  ORDER BY rpc_alfresco_get_calls."programmeName", call_applications.id;]]></expression>
	</reference>
</view>

<usertype name="rpc_alfresco_get_projects" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="projectId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="projectCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="projectTitle">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="programmeId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="programmeCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="programmeName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="callId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="callCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="callName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="organisationCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="organisationName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationContactFullName">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="organisationContactCellphoneNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationEmailAddress">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationTelephoneNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationFaxNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressLine1">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressLine2">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressProvinceCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressCityCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressSuburbCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPostalAddressLine1">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPostalAddressLine2">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="projectStatusId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="projectStatusCode">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="projectStatusName">
		<type name="text"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_projects"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_projects"/>
	</return-type>
	<parameter name="projectId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="projectCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="programmeId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="programmeCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="callId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="callCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="organisationCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="projectStatusId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="projectStatusCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="projectStatusName" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN

	SET ROLE postgres;
	
        RETURN QUERY SELECT * FROM rpc_alfresco_get_projects 
	WHERE 
		rpc_alfresco_get_projects."projectId" = COALESCE(alfresco_get_projects."projectId",rpc_alfresco_get_projects."projectId")
	AND 	rpc_alfresco_get_projects."projectCode" = COALESCE(alfresco_get_projects."projectCode",rpc_alfresco_get_projects."projectCode")
	
	AND 	rpc_alfresco_get_projects."programmeId" = COALESCE(alfresco_get_projects."programmeId",rpc_alfresco_get_projects."programmeId")
	AND 	rpc_alfresco_get_projects."programmeCode" = COALESCE(alfresco_get_projects."programmeCode",rpc_alfresco_get_projects."programmeCode")

	AND 	rpc_alfresco_get_projects."callId" = COALESCE(alfresco_get_projects."callId",rpc_alfresco_get_projects."callId")
	AND 	rpc_alfresco_get_projects."callCode" = COALESCE(alfresco_get_projects."callCode",rpc_alfresco_get_projects."callCode")

	AND 	rpc_alfresco_get_projects."organisationId" = COALESCE(alfresco_get_projects."organisationId",rpc_alfresco_get_projects."organisationId")
	AND 	rpc_alfresco_get_projects."organisationCode" = COALESCE(alfresco_get_projects."organisationCode",rpc_alfresco_get_projects."organisationCode")

	AND 	rpc_alfresco_get_projects."projectStatusId" = COALESCE(alfresco_get_projects."projectStatusId",rpc_alfresco_get_projects."projectStatusId")
	AND 	rpc_alfresco_get_projects."projectStatusCode" = COALESCE(alfresco_get_projects."projectStatusCode",rpc_alfresco_get_projects."projectStatusCode")
	AND 	rpc_alfresco_get_projects."projectStatusName" = COALESCE(alfresco_get_projects."projectStatusName",rpc_alfresco_get_projects."projectStatusName");
	
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<usertype name="rpc_alfresco_get_organisations" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="organisationId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="organisationCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="organisationName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationNPONumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationContactFullName">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="organisationContactCellphoneNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationEmailAddress">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationTelephoneNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationFaxNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressLine1">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressLine2">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressSuburbCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressCityCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressProvinceCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPostalAddressLine1">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPostalAddressLine2">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_get_organisations"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="50">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_organisations"/>
	</return-type>
	<parameter name="organisationId" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="organisationCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable   
BEGIN
	SET ROLE postgres;
	
        RETURN QUERY SELECT * FROM rpc_alfresco_get_organisations 
	WHERE 
	rpc_alfresco_get_organisations."organisationId" = COALESCE(alfresco_get_organisations."organisationId",rpc_alfresco_get_organisations."organisationId")
	AND rpc_alfresco_get_organisations."organisationCode" = COALESCE(alfresco_get_organisations."organisationCode",rpc_alfresco_get_organisations."organisationCode")
	ORDER BY rpc_alfresco_get_organisations."organisationName";
        

--	EXCEPTION WHEN OTHERS THEN /*Catch all*/
--	RAISE EXCEPTION 'Something went wrong';	
END;
]]></definition>
</function>

<function name="alfresco_create_organisation"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_get_organisations"/>
	</return-type>
	<parameter name="organisationName" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationNPONumber" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationContactFullName" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationContactCellphoneNumber" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationEmailAddress" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationTelephoneNumber" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationFaxNumber" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationPhysicalAddressLine1" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationPhysicalAddressLine2" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationPhysicalAddressSuburbCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationPhysicalAddressCityCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationPhysicalAddressProvinceCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationPostalAddressLine1" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationPostalAddressLine2">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable
DECLARE organisation_id INTEGER;
DECLARE province_id INTEGER;  
BEGIN	
   
SET ROLE postgres;
province_id := id from provinces where code = alfresco_create_organisation."organisationPhysicalAddressCityCode";

INSERT INTO organisations(
	name,
	npo_no,
	contact_person,
	cell_phone,
	email_address,
	work_phone,
	fax_no,
	street_first_line,
	street_second_line,
	suburb,
	place,
	province,
	postal_first_line,
	postal_second_line
) VALUES (
	alfresco_create_organisation."organisationName",
	alfresco_create_organisation."organisationNPONumber",
	alfresco_create_organisation."organisationContactFullName",
	alfresco_create_organisation."organisationContactCellphoneNumber",
	alfresco_create_organisation."organisationEmailAddress",
	alfresco_create_organisation."organisationTelephoneNumber" ,
	alfresco_create_organisation."organisationFaxNumber",
	alfresco_create_organisation."organisationPhysicalAddressLine1",
	alfresco_create_organisation."organisationPhysicalAddressLine2",
	alfresco_create_organisation."organisationPhysicalAddressSuburbCode"::int,
	alfresco_create_organisation."organisationPhysicalAddressCityCode"::int,
	province_id,
	alfresco_create_organisation."organisationPostalAddressLine1",
	alfresco_create_organisation."organisationPostalAddressLine2"
)
RETURNING organisations.id INTO organisation_id; 

    RETURN QUERY SELECT * FROM rpc_alfresco_get_organisations 
	WHERE  rpc_alfresco_get_organisations."organisationId" = organisation_id;
	
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;]]></definition>
</function>

<usertype name="rpc_alfresco_create_application" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="projectId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="projectCode">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="projectTitle">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="programmeId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="programmeCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="programmeName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="callId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="callCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="callName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationId">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="organisationCode">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="organisationName">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationContactFullName">
		<type name="character varying" length="50"/>
	</typeattrib>
	<typeattrib name="organisationContactCellphoneNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationEmailAddress">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationTelephoneNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationFaxNumber">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressLine1">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressLine2">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressProvinceCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressCityCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPhysicalAddressSuburbCode">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="organisationPostalAddressLine1">
		<type name="character varying" length="255"/>
	</typeattrib>
	<typeattrib name="organisationPostalAddressLine2">
		<type name="character varying" length="255"/>
	</typeattrib>
</usertype>

<function name="alfresco_create_project"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.rpc_alfresco_create_application"/>
	</return-type>
	<parameter name="projectCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="projectTitle" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="callCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="organisationCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<parameter name="projectStatusCode" default-value="NULL::text">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
--#variable_conflict use_variable  
DECLARE project_code INTEGER;
DECLARE organisation_id INTEGER;
DECLARE call_id	INTEGER;
BEGIN
	SET ROLE postgres;
	
        SELECT call_applications.id INTO project_code
        FROM   call_applications
        WHERE  call_applications.id = alfresco_create_project."projectCode"::int;

	SELECT calls.id into call_id FROM calls WHERE calls.call_reference_path_safe = alfresco_create_project."callCode" LIMIT 1;

        organisation_id := id from organisations where code = alfresco_create_project."organisationCode";
	
        IF project_code IS NULL THEN
		--RAISE EXCEPTION 'Application does not Exist!';
		--select alfresco_create_application_code."projectCode"::int into project_code
		--from alfresco_create_application_code(alfresco_create_project."callCode");
		INSERT INTO call_applications (id,call,applicant,application_status,title) VALUES (
			alfresco_create_project."projectCode"::int,	
			call_id,organisation_id,alfresco_create_project."projectStatusCode"::int,alfresco_create_project."projectTitle"	
		);
        ELSE
		UPDATE call_applications
		SET (
			title,
			applicant
		) = (
			alfresco_create_project."projectTitle",
			organisation_id
		)
		
		WHERE  call_applications.id = project_code;
		RETURN QUERY SELECT * FROM rpc_alfresco_create_application
		WHERE  rpc_alfresco_create_application."projectId" = project_code;
	END IF;
	
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;]]></definition>
</function>

<function name="assign_compliance_officer"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
  app_officer_id integer; 
  app_officer_row application_compliance_officers;
begin  
  IF NEW.compliance_section = 2 THEN
	IF NEW.lead THEN
		RAISE EXCEPTION 'Section Does not Have Lead';
	ELSE
		SELECT * FROM application_compliance_officers WHERE		
		application_compliance_officers.application = NEW.application AND
		application_compliance_officers.compliance_section = NEW.compliance_section
		INTO app_officer_row;
		
		IF app_officer_row is null THEN
		ELSE
			IF TG_OP = 'INSERT' THEN
				RAISE EXCEPTION 'Only one Officer per Application Allowed for this Section';
			ELSE 
			END IF;
		END IF;			
	END IF;	
  ELSIF NEW.compliance_section = 3  THEN
	IF NEW.lead THEN
		RAISE EXCEPTION 'Section Does not Have Lead';
	ELSE 
		SELECT * FROM application_compliance_officers WHERE		
		application_compliance_officers.application = NEW.application AND
		application_compliance_officers.compliance_section = NEW.compliance_section
		INTO app_officer_row;
		
		IF app_officer_row is null THEN
		ELSE
			IF TG_OP = 'INSERT' THEN
				RAISE EXCEPTION 'Only one Officer per Application Allowed for this Section';
			ELSE 
			END IF;
		END IF;			
	END IF;		
  ELSIF NEW.compliance_section = 4  THEN
	IF NEW.lead THEN
		SELECT * FROM application_compliance_officers WHERE		
		application_compliance_officers.application = NEW.application AND
		application_compliance_officers.compliance_section = NEW.compliance_section AND
		application_compliance_officers.lead = True INTO app_officer_row;
				
		IF app_officer_row is null THEN
		ELSE
			IF TG_OP = 'INSERT' THEN
			RAISE EXCEPTION 'Lead Assessor already Assigned for this Application';
			ELSE
			END IF;
		END IF;
	ELSE
	END IF;		
  ELSIF NEW.compliance_section = 6  THEN
	IF NEW.lead THEN
	RAISE EXCEPTION 'Section Does not Have Lead';
	ELSE
		SELECT * FROM application_compliance_officers WHERE		
		application_compliance_officers.application = NEW.application AND
		application_compliance_officers.compliance_section = NEW.compliance_section
		INTO app_officer_row;
		
		IF app_officer_row is null THEN
		ELSE
			IF TG_OP = 'INSERT' THEN
				RAISE EXCEPTION 'Only one Officer per Application Allowed for this Section';
			ELSE 				
			END IF;
		END IF;			
	END IF;	
  END IF;
	
  RETURN NEW;
end;
]]></definition>
</function>

<trigger name="assign_compliance_officer" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="public.application_compliance_officers">
		<function signature="public.assign_compliance_officer()"/>
</trigger>

<usertype name="jwt_claims" configuration="composite">
	<schema name="basic_auth"/>
	<role name="postgres"/>
	<typeattrib name="role">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="email">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="exp">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="person_id">
		<type name="integer"/>
	</typeattrib>
</usertype>

<view name="lookup_compliance_officers">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="164.286" y="4406.63"/>
	<reference>
		<expression><![CDATA[ SELECT persons.id,
    (((persons.first_names)::text || ' '::text) || (persons.last_name)::text) AS full_name,
    persons.application_user,
    persons.login_email,
    persons.email_address
   FROM persons
  WHERE (persons.application_user = true);]]></expression>
	</reference>
</view>

<view name="lookup_compliance_applications">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="448.979" y="4406.63"/>
	<reference>
		<expression><![CDATA[ SELECT call_applications.id AS application,
    calls.call_reference,
    organisations.name,
    call_applications.application_status,
    call_application_statuses.description AS application_status_description
   FROM (((call_applications
     JOIN organisations ON ((call_applications.applicant = organisations.id)))
     JOIN calls ON ((call_applications.call = calls.id)))
     JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)))
  WHERE (call_applications.application_status < 13);]]></expression>
	</reference>
</view>

<function name="demote_application"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="application">
		<type name="integer"/>
	</parameter>
	<parameter name="current_section">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[

BEGIN	
	SET ROLE postgres;
	
	IF current_section =  2 THEN --Admin
		DELETE FROM application_compliance_officers WHERE 
		application_compliance_officers.application = demote_application.application AND
		application_compliance_officers.compliance_section = demote_application.current_section;
		UPDATE call_applications SET application_status = 1 WHERE  call_applications.id = application;

	ELSIF current_section = 3 THEN --Relevance
		DELETE FROM application_compliance_officers WHERE 
		application_compliance_officers.application = demote_application.application AND
		application_compliance_officers.compliance_section = demote_application.current_section;
		UPDATE call_applications SET application_status = 2 WHERE  call_applications.id = application;

	ELSIF current_section = 4 THEN --Assessment
		DELETE FROM application_compliance_officers WHERE 
		application_compliance_officers.application = demote_application.application AND
		application_compliance_officers.compliance_section = demote_application.current_section;
		UPDATE call_applications SET application_status = 3 WHERE  call_applications.id = application;

	ELSIF current_section =  5 THEN --PMU
		UPDATE call_applications SET pmu_advisory = '' WHERE call_applications.id = application;
		UPDATE call_applications SET application_status = 4 WHERE  call_applications.id = application;

	ELSIF current_section = 6 THEN --DD
		DELETE FROM application_compliance_officers WHERE 
		application_compliance_officers.application = demote_application.application AND
		application_compliance_officers.compliance_section = demote_application.current_section;
		UPDATE call_applications SET application_status = 5 WHERE  call_applications.id = application;

	ELSIF current_section = 7 THEN --EVC
		DELETE FROM evc_applications WHERE evc_applications.application = appplication;
		UPDATE call_applications SET application_status = 6 WHERE  call_applications.id = application;

	END IF;
		       
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;]]></definition>
</function>

<function name="calc_call_path"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<definition><![CDATA[
BEGIN	
	SET ROLE postgres;
	UPDATE calls SET call_reference_path_safe = replace( call_reference, '/', '-');	
END;]]></definition>
</function>

<function name="calc_call_path_tf"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
BEGIN	
--	SET ROLE postgres;
	NEW.call_reference_path_safe = replace( NEW.call_reference, '/', '-');
	RETURN NEW;
END;]]></definition>
</function>

<trigger name="calc_call_path_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="public.calls">
		<function signature="public.calc_call_path_tf()"/>
</trigger>

<function name="promote_application"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="application">
		<type name="integer"/>
	</parameter>
	<parameter name="current_section">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[

BEGIN	
	SET ROLE postgres;
	
	IF current_section =  2 THEN --ADMIN
		UPDATE call_applications SET application_status = 3 WHERE  call_applications.id = application;
	ELSIF current_section = 3 THEN -- RELEVANCE
		UPDATE call_applications SET application_status = 4 WHERE  call_applications.id = application;
	ELSIF current_section = 4 THEN -- ASSESSMENT
		UPDATE call_applications SET application_status = 5 WHERE  call_applications.id = application;
	ELSIF current_section =  5 THEN -- PMU
		UPDATE call_applications SET application_status = 6 WHERE  call_applications.id = application;
	ELSIF current_section = 6 THEN -- DD
		UPDATE call_applications SET application_status = 7 WHERE  call_applications.id = application;
	ELSIF current_section = 7 THEN -- APPROVAL MEETING
		UPDATE call_applications SET application_status = 8 WHERE  call_applications.id = application;
	END IF;
		       
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;]]></definition>
</function>

<function name="fail_application"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="application">
		<type name="integer"/>
	</parameter>
	<parameter name="current_section">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[

BEGIN	
	SET ROLE postgres;
	
	IF current_section =  2 THEN 
		UPDATE call_applications SET application_status = 22 WHERE  call_applications.id = application;
	ELSIF current_section = 3 THEN
		UPDATE call_applications SET application_status = 23 WHERE  call_applications.id = application;
	ELSIF current_section = 4 THEN
		UPDATE call_applications SET application_status = 24 WHERE  call_applications.id = application;
	ELSIF current_section =  5 THEN 
		UPDATE call_applications SET application_status = 25 WHERE  call_applications.id = application;
	ELSIF current_section = 6 THEN
		UPDATE call_applications SET application_status = 26 WHERE  call_applications.id = application;
	ELSIF current_section = 7 THEN
		UPDATE call_applications SET application_status = 27 WHERE  call_applications.id = application;
	END IF;
		       
	--EXCEPTION WHEN OTHERS THEN /*Catch all*/
	--RAISE EXCEPTION 'Something went wrong';	
END;]]></definition>
</function>

<view name="lookup_templates_max_score">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="765.033" y="4406.63"/>
	<reference>
		<expression><![CDATA[ SELECT compliance_templates.id,
    questions.is_scoring,
    sum(questions.max_scoring) AS sum
   FROM ((compliance_templates
     JOIN categories ON ((categories.template = compliance_templates.id)))
     JOIN questions ON ((questions.catergory = categories.id)))
  WHERE (questions.is_scoring = true)
  GROUP BY compliance_templates.id, questions.is_scoring;]]></expression>
	</reference>
</view>

<view name="compliance_section_scoring_average_a">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1061.15" y="4406.63"/>
	<reference>
		<expression><![CDATA[ SELECT count(DISTINCT application_compliance_officers.id) AS compliance_officers,
    application_compliance_officers.application,
    application_compliance_officers.compliance_section,
    questions.is_scoring,
    sum((compliance_answers.answer)::double precision) AS sum,
    compliance_templates.id AS template_id
   FROM ((((application_compliance_officers
     JOIN compliance_answers ON ((compliance_answers.application_compliance_officer = application_compliance_officers.id)))
     RIGHT JOIN questions ON ((compliance_answers.question = questions.id)))
     RIGHT JOIN categories ON ((questions.catergory = categories.id)))
     RIGHT JOIN compliance_templates ON ((categories.template = compliance_templates.id)))
  WHERE (questions.is_scoring = true)
  GROUP BY application_compliance_officers.application, application_compliance_officers.compliance_section, questions.is_scoring, compliance_templates.id;]]></expression>
	</reference>
</view>

<view name="application_compliance_average_score">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1422.55" y="4406.63"/>
	<reference>
		<expression><![CDATA[ SELECT compliance_section_scoring_average_a.compliance_officers,
    compliance_section_scoring_average_a.application,
    compliance_section_scoring_average_a.compliance_section,
    compliance_section_scoring_average_a.is_scoring,
    (compliance_section_scoring_average_a.sum / (compliance_section_scoring_average_a.compliance_officers)::double precision) AS average_score,
    compliance_section_scoring_average_a.template_id,
    lookup_templates_max_score.sum AS max_score
   FROM (compliance_section_scoring_average_a
     JOIN lookup_templates_max_score ON ((compliance_section_scoring_average_a.template_id = lookup_templates_max_score.id)));]]></expression>
	</reference>
</view>

<view name="lookup_calls_uigrid">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="164.286" y="4494.03"/>
	<reference>
		<expression><![CDATA[ SELECT calls.call_reference AS value,
    calls.call_reference AS label
   FROM calls;]]></expression>
	</reference>
</view>

<view name="grid_compliance_applications_with_lead">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="396.308" y="4494.03"/>
	<reference>
		<expression><![CDATA[ SELECT grid_compliance_applications.id,
    grid_compliance_applications.application,
    grid_compliance_applications.compliance_officer,
    grid_compliance_applications.first_names,
    grid_compliance_applications.last_name,
    grid_compliance_applications.email_address,
    grid_compliance_applications.call_reference,
    grid_compliance_applications.name,
    grid_compliance_applications.province,
    grid_compliance_applications.lead,
    grid_compliance_applications.admin_compliance_template,
    grid_compliance_applications.relevance_compliance_template,
    grid_compliance_applications.assessment_compliance_template,
    grid_compliance_applications.complete,
    grid_compliance_applications.compliance_section,
    grid_compliance_applications.application_status,
    grid_compliance_applications.application_status_description,
    grid_compliance_applications.due_diligence_compliance_template,
    application_compliance_officers.lead AS has_lead,
    persons.login_email AS lead_assessor
   FROM ((grid_compliance_applications
     LEFT JOIN application_compliance_officers ON ((grid_compliance_applications.application = application_compliance_officers.application)))
     JOIN persons ON ((application_compliance_officers.compliance_officer = persons.id)))
  WHERE (grid_compliance_applications.lead = false);]]></expression>
	</reference>
</view>

<sequence name="approval_meeting_types_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="approval_meeting_types">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1354.79" y="2431.94"/>
	<column name="id" not-null="true" sequence="public.approval_meeting_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="pk_approval_meeting_types" type="pk-constr" table="public.approval_meeting_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<view name="grid_approval_meetings">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="764.236" y="4494.03"/>
	<reference>
		<expression><![CDATA[ SELECT approval_meetings.id,
    approval_meetings.meeting_date,
    approval_meetings.name,
    approval_meeting_types.name AS type_of_meeting
   FROM (approval_meetings
     LEFT JOIN approval_meeting_types ON ((approval_meetings.approval_meeting_type = approval_meeting_types.id)));]]></expression>
	</reference>
</view>

<function name="create_log_columns"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<definition><![CDATA[
DECLARE
 my_row RECORD;
BEGIN
 FOR my_row IN 
 SELECT table_name
 FROM information_schema.tables
 WHERE table_schema = 'public' and table_type='BASE TABLE'
 LOOP
 IF NOT EXISTS
 (
 SELECT attname FROM pg_attribute WHERE attrelid = 
 (SELECT oid FROM pg_class WHERE relname = my_row.table_name )
 AND attname = 'created_at'
 )
 THEN
 EXECUTE('ALTER TABLE ' || my_row.table_name || 
 ' ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,'||
 ' ADD COLUMN created_by CHARACTER VARYING(255),' ||
 ' ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,'||
 ' ADD COLUMN updated_by CHARACTER VARYING(255);'
 );
 END IF;
 END LOOP;
END
]]></definition>
</function>

<function name="log_update"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
  BEGIN
    NEW.updated_at = NOW();
    NEW.updated_by = basic_auth.current_email();
    RETURN NEW;
  END;
]]></definition>
</function>

<function name="log_insert"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
  BEGIN
    NEW.created_at = NOW();
    NEW.created_by = basic_auth.current_email();
    RETURN NEW;
  END;
]]></definition>
</function>

<function name="create_log_triggers"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<definition><![CDATA[
DECLARE
 my_row RECORD;
BEGIN
 FOR my_row IN 
 SELECT table_name
 FROM information_schema.tables
 WHERE table_schema = 'public' and table_type='BASE TABLE'
 LOOP
 EXECUTE(
'DROP TRIGGER IF EXISTS log_insert_'||my_row.table_name||'_tf ON ' || my_row.table_name || ';' 
'DROP TRIGGER IF EXISTS log_update_'||my_row.table_name||'_tf ON ' || my_row.table_name || ';' 

'CREATE TRIGGER log_insert_'||my_row.table_name||'_tf BEFORE INSERT ON ' || my_row.table_name || ' FOR EACH ROW EXECUTE PROCEDURE log_insert();' 
'CREATE TRIGGER log_update_'||my_row.table_name||'_tf BEFORE UPDATE ON ' || my_row.table_name || ' FOR EACH ROW EXECUTE PROCEDURE log_update();'
 );

 END LOOP;
END
]]></definition>
</function>

<extension name="hstore" handles-type="true" cur-version="1.2">
	<schema name="public"/>
	<comment><![CDATA[data type for storing sets of (key, value) pairs]]></comment>
</extension>

<schema name="audit" rect-visible="true" fill-color="#1a629a">
	<role name="postgres"/>
	<comment><![CDATA[Out-of-table audit/history logging tables and trigger functions]]></comment>
</schema>

<sequence name="logged_actions_event_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="audit"/>
	<role name="postgres"/>
</sequence>

<table name="logged_actions">
	<schema name="audit"/>
	<role name="postgres"/>
	<comment><![CDATA[History of auditable actions on audited tables, from audit.if_modified_func()]]></comment>
	<position x="3335.25" y="50"/>
	<column name="event_id" not-null="true" sequence="audit.logged_actions_event_id_seq">
		<type name="bigint"/>
		<comment><![CDATA[Unique identifier for each auditable event]]></comment>
	</column>
	<column name="schema_name" not-null="true">
		<type name="text"/>
		<comment><![CDATA[Database schema audited table for this event is in]]></comment>
	</column>
	<column name="table_name" not-null="true">
		<type name="text"/>
		<comment><![CDATA[Non-schema-qualified table name of table event occured in]]></comment>
	</column>
	<column name="relid" not-null="true">
		<type name="oid"/>
		<comment><![CDATA[Table OID. Changes with drop/create. Get with 'tablename'::regclass]]></comment>
	</column>
	<column name="session_user_name">
		<type name="text"/>
		<comment><![CDATA[Login / session user whose statement caused the audited event]]></comment>
	</column>
	<column name="action_tstamp_tx" not-null="true">
		<type name="timestamp with time zone" with-timezone="true"/>
		<comment><![CDATA[Transaction start timestamp for tx in which audited event occurred]]></comment>
	</column>
	<column name="action_tstamp_stm" not-null="true">
		<type name="timestamp with time zone" with-timezone="true"/>
		<comment><![CDATA[Statement start timestamp for tx in which audited event occurred]]></comment>
	</column>
	<column name="action_tstamp_clk" not-null="true">
		<type name="timestamp with time zone" with-timezone="true"/>
		<comment><![CDATA[Wall clock time at which audited event's trigger call occurred]]></comment>
	</column>
	<column name="transaction_id">
		<type name="bigint"/>
		<comment><![CDATA[Identifier of transaction that made the change. May wrap, but unique paired with action_tstamp_tx.]]></comment>
	</column>
	<column name="application_name">
		<type name="text"/>
		<comment><![CDATA[Application name set when this audit event occurred. Can be changed in-session by client.]]></comment>
	</column>
	<column name="client_addr">
		<type name="inet"/>
		<comment><![CDATA[IP address of client that issued query. Null for unix domain socket.]]></comment>
	</column>
	<column name="client_port">
		<type name="integer"/>
		<comment><![CDATA[Remote peer IP port address of client that issued query. Undefined for unix socket.]]></comment>
	</column>
	<column name="client_query">
		<type name="text"/>
		<comment><![CDATA[Top-level query that caused this auditable event. May be more than one statement.]]></comment>
	</column>
	<column name="action" not-null="true">
		<type name="text"/>
		<comment><![CDATA[Action type; I = insert, D = delete, U = update, T = truncate]]></comment>
	</column>
	<column name="row_data">
		<type name="public.hstore"/>
		<comment><![CDATA[Record value. Null for statement-level trigger. For INSERT this is the new tuple. For DELETE and UPDATE it is the old tuple.]]></comment>
	</column>
	<column name="changed_fields">
		<type name="public.hstore"/>
		<comment><![CDATA[New values of fields changed by UPDATE. Null except for row-level UPDATE events.]]></comment>
	</column>
	<column name="statement_only" not-null="true">
		<type name="boolean"/>
		<comment><![CDATA['t' if audit event is from an FOR EACH STATEMENT trigger, 'f' for FOR EACH ROW]]></comment>
	</column>
	<column name="postgrest_user" default-value="current_setting('postgrest.claims.email'::text)">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="logged_actions_action_check" type="ck-constr" table="audit.logged_actions">
			<expression><![CDATA[(action = ANY (ARRAY['I'::text, 'D'::text, 'U'::text, 'T'::text]))]]></expression>
	</constraint>
	<constraint name="logged_actions_pkey" type="pk-constr" table="audit.logged_actions">
		<columns names="event_id" ref-type="src-columns"/>
	</constraint>
</table>

<index name="logged_actions_relid_idx" table="audit.logged_actions"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="relid"/>
		</idxelement>
</index>

<index name="logged_actions_action_tstamp_tx_stm_idx" table="audit.logged_actions"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="action_tstamp_stm"/>
		</idxelement>
</index>

<index name="logged_actions_action_idx" table="audit.logged_actions"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="action"/>
		</idxelement>
</index>

<function name="if_modified_func"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="audit"/>
	<role name="postgres"/>
	<comment><![CDATA[
Track changes to a table at the statement and/or row level.

Optional parameters to trigger in CREATE TRIGGER call:

param 0: boolean, whether to log the query text. Default 't'.

param 1: text[], columns to ignore in updates. Default [].

         Updates to ignored cols are omitted from changed_fields.

         Updates with only ignored cols changed are not inserted
         into the audit log.

         Almost all the processing work is still done for updates
         that ignored. If you need to save the load, you need to use
         WHEN clause on the trigger instead.

         No warning or error is issued if ignored_cols contains columns
         that do not exist in the target table. This lets you specify
         a standard set of ignored columns.

There is no parameter to disable logging of values. Add this trigger as
a 'FOR EACH STATEMENT' rather than 'FOR EACH ROW' trigger if you do not
want to log row values.

Note that the user name logged is the login role for the session. The audit trigger
cannot obtain the active role because it is reset by the SECURITY DEFINER invocation
of the audit trigger its self.
]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
    audit_row audit.logged_actions;
    include_values boolean;
    log_diffs boolean;
    h_old hstore;
    h_new hstore;
    excluded_cols text[] = ARRAY[]::text[];
BEGIN
    IF TG_WHEN <> 'AFTER' THEN
        RAISE EXCEPTION 'audit.if_modified_func() may only run as an AFTER trigger';
    END IF;

    audit_row = ROW(
        nextval('audit.logged_actions_event_id_seq'), -- event_id
        TG_TABLE_SCHEMA::text,                        -- schema_name
        TG_TABLE_NAME::text,                          -- table_name
        TG_RELID,                                     -- relation OID for much quicker searches
        session_user::text,                           -- session_user_name
        current_timestamp,                            -- action_tstamp_tx
        statement_timestamp(),                        -- action_tstamp_stm
        clock_timestamp(),                            -- action_tstamp_clk
        txid_current(),                               -- transaction ID
        current_setting('application_name'),          -- client application
        inet_client_addr(),                           -- client_addr
        inet_client_port(),                           -- client_port
        current_query(),                              -- top-level query or queries (if multistatement) from client
        substring(TG_OP,1,1),                         -- action
        NULL, NULL,                                   -- row_data, changed_fields
        'f',        				      -- statement_only
        basic_auth.current_email()                                        
        );

    IF NOT TG_ARGV[0]::boolean IS DISTINCT FROM 'f'::boolean THEN
        audit_row.client_query = NULL;
    END IF;

    IF TG_ARGV[1] IS NOT NULL THEN
        excluded_cols = TG_ARGV[1]::text[];
    END IF;
    
    IF (TG_OP = 'UPDATE' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(OLD.*) - excluded_cols;
        audit_row.changed_fields =  (hstore(NEW.*) - audit_row.row_data) - excluded_cols;
        IF audit_row.changed_fields = hstore('') THEN
            -- All changed fields are ignored. Skip this update.
            RETURN NULL;
        END IF;
    ELSIF (TG_OP = 'DELETE' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(OLD.*) - excluded_cols;
    ELSIF (TG_OP = 'INSERT' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(NEW.*) - excluded_cols;
    ELSIF (TG_LEVEL = 'STATEMENT' AND TG_OP IN ('INSERT','UPDATE','DELETE','TRUNCATE')) THEN
        audit_row.statement_only = 't';
    ELSE
        RAISE EXCEPTION '[audit.if_modified_func] - Trigger func added as trigger for unhandled case: %, %',TG_OP, TG_LEVEL;
        RETURN NULL;
    END IF;
    INSERT INTO audit.logged_actions VALUES (audit_row.*);
    RETURN NULL;
END;
]]></definition>
</function>

<function name="audit_table"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="audit"/>
	<role name="postgres"/>
	<comment><![CDATA[
Add auditing support to a table.

Arguments:
   target_table:     Table name, schema qualified if not on search_path
   audit_rows:       Record each row change, or only audit at a statement level
   audit_query_text: Record the text of the client query that triggered the audit event?
   ignored_cols:     Columns to exclude from update diffs, ignore updates that change only ignored cols.
]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="target_table">
		<type name="regclass"/>
	</parameter>
	<parameter name="audit_rows">
		<type name="boolean"/>
	</parameter>
	<parameter name="audit_query_text">
		<type name="boolean"/>
	</parameter>
	<parameter name="ignored_cols">
		<type name="text" dimension="1"/>
	</parameter>
	<definition><![CDATA[
DECLARE
  stm_targets text = 'INSERT OR UPDATE OR DELETE OR TRUNCATE';
  _q_txt text;
  _ignored_cols_snip text = '';
BEGIN
    EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_row ON ' || quote_ident(target_table::TEXT);
    EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_stm ON ' || quote_ident(target_table::TEXT);

    IF audit_rows THEN
        IF array_length(ignored_cols,1) > 0 THEN
            _ignored_cols_snip = ', ' || quote_literal(ignored_cols);
        END IF;
        _q_txt = 'CREATE TRIGGER audit_trigger_row AFTER INSERT OR UPDATE OR DELETE ON ' || 
                 quote_ident(target_table::TEXT) || 
                 ' FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func(' ||
                 quote_literal(audit_query_text) || _ignored_cols_snip || ');';
        RAISE NOTICE '%',_q_txt;
        EXECUTE _q_txt;
        stm_targets = 'TRUNCATE';
    ELSE
    END IF;

    _q_txt = 'CREATE TRIGGER audit_trigger_stm AFTER ' || stm_targets || ' ON ' ||
             target_table ||
             ' FOR EACH STATEMENT EXECUTE PROCEDURE audit.if_modified_func('||
             quote_literal(audit_query_text) || ');';
    RAISE NOTICE '%',_q_txt;
    EXECUTE _q_txt;

END;
]]></definition>
</function>

<function name="audit_table"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="audit"/>
	<role name="postgres"/>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="target_table">
		<type name="regclass"/>
	</parameter>
	<parameter name="audit_rows">
		<type name="boolean"/>
	</parameter>
	<parameter name="audit_query_text">
		<type name="boolean"/>
	</parameter>
	<definition><![CDATA[
SELECT audit.audit_table($1, $2, $3, ARRAY[]::text[]);
]]></definition>
</function>

<function name="audit_table"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="audit"/>
	<role name="postgres"/>
	<comment><![CDATA[
Add auditing support to the given table. Row-level changes will be logged with full client query text. No cols are ignored.
]]></comment>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="target_table">
		<type name="regclass"/>
	</parameter>
	<definition><![CDATA[
SELECT audit.audit_table($1, BOOLEAN 't', BOOLEAN 't');
]]></definition>
</function>

<function name="create_audit_trigger"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<definition><![CDATA[
DECLARE
 my_row RECORD;
BEGIN
 FOR my_row IN 
 SELECT table_name
 FROM information_schema.tables
 WHERE table_schema = 'public' and table_type='BASE TABLE'
 LOOP
 EXECUTE(
 'SELECT audit.audit_table(''public.'|| my_row.table_name||''');'
 );

 END LOOP;
END
]]></definition>
</function>

<extension name="fuzzystrmatch" cur-version="1.0">
	<schema name="public"/>
	<comment><![CDATA[determine similarities and distance between strings]]></comment>
</extension>

<sequence name="organisation_has_types_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="postgres"/>
</sequence>

<table name="organisation_has_types">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="2072.89" y="3254.51"/>
	<column name="id" not-null="true" sequence="public.organisation_has_types_id_seq">
		<type name="integer"/>
	</column>
	<column name="organisation">
		<type name="integer"/>
	</column>
	<column name="type">
		<type name="integer"/>
	</column>
	<column name="created_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="created_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="updated_at" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="updated_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="pk_organisation_has_type" type="pk-constr" table="public.organisation_has_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<index name="fki_organisation" table="public.organisation_has_types"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="organisation"/>
		</idxelement>
</index>

<index name="fki_types" table="public.organisation_has_types"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="type"/>
		</idxelement>
</index>

<trigger name="log_insert_email_notifications_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.email_notifications">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_email_notifications_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.email_notifications">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_programmes_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.programmes">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_programmes_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.programmes">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_compliance_templates_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.compliance_templates">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_compliance_templates_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.compliance_templates">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_application_compliance_officers_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.application_compliance_officers">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_application_compliance_officers_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.application_compliance_officers">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_persons_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.persons">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_persons_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.persons">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_organisation_has_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.organisation_has_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_organisation_has_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.organisation_has_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_project_beneficiaries_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.project_beneficiaries">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_project_beneficiaries_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.project_beneficiaries">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_approval_meeting_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.approval_meeting_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_approval_meeting_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.approval_meeting_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_bank_accounts_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.bank_accounts">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_bank_accounts_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.bank_accounts">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_beneficiaries_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.beneficiaries">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_beneficiaries_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.beneficiaries">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_provinces_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.provinces">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_provinces_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.provinces">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_call_evaluations_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.call_evaluations">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_call_evaluations_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.call_evaluations">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_contract_budget_items_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.project_budget">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_contract_budget_items_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.project_budget">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_organisation_statuses_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.organisation_statuses">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_organisation_statuses_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.organisation_statuses">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_approval_meetings_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.approval_meetings">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_approval_meetings_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.approval_meetings">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_contract_implementation_plan_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.contract_implementation_plan">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_contract_implementation_plan_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.contract_implementation_plan">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_organisation_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.organisation_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_organisation_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.organisation_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_payment_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.payment_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_payment_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.payment_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_project_contracts_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.project_contracts">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_project_contracts_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.project_contracts">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_personal_titles_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.personal_titles">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_personal_titles_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.personal_titles">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_milestone_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.milestone_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_milestone_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.milestone_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_job_titles_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.job_titles">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_job_titles_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.job_titles">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_payment_schedule_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.payment_schedule">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_payment_schedule_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.payment_schedule">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_project_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.project_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_project_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.project_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_project_outputs_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.project_outputs">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_project_outputs_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.project_outputs">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_project_statuses_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.project_statuses">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_project_statuses_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.project_statuses">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_question_options_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.question_options">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_question_options_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.question_options">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_call_application_statuses_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.call_application_statuses">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_call_application_statuses_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.call_application_statuses">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_key_performance_indicators_targets_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.key_performance_indicators_targets">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_key_performance_indicators_targets_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.key_performance_indicators_targets">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_evc_attendees_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.evc_attendees">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_evc_attendees_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.evc_attendees">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_key_performance_indicators_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.key_performance_indicators">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_key_performance_indicators_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.key_performance_indicators">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_key_result_areas_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.key_result_areas">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_key_result_areas_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.key_result_areas">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_calls_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.calls">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_calls_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.calls">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_project_expenses_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.project_expenses">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_project_expenses_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.project_expenses">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_contract_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.contract_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_contract_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.contract_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_questions_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.questions">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_questions_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.questions">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_organisation_bank_accounts_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.organisation_bank_accounts">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_organisation_bank_accounts_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.organisation_bank_accounts">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_project_milestones_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.project_milestones">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_project_milestones_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.project_milestones">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_person_bank_accounts_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.person_bank_accounts">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_person_bank_accounts_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.person_bank_accounts">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_organisations_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.organisations">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_organisations_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.organisations">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_projects_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.projects">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_projects_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.projects">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_suburbs_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.suburbs">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_suburbs_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.suburbs">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_compliance_answers_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.compliance_answers">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_compliance_answers_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.compliance_answers">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_categories_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.categories">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_categories_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.categories">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_evc_applications_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.evc_applications">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_evc_applications_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.evc_applications">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_places_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.places">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_places_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.places">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_call_applications_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.call_applications">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_call_applications_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.call_applications">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_question_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.question_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_question_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.question_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="log_insert_submission_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.submission_types">
		<function signature="public.log_insert()"/>
</trigger>

<trigger name="log_update_submission_types_tf" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.submission_types">
		<function signature="public.log_update()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.programmes">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.programmes">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.compliance_templates">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.compliance_templates">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.application_compliance_officers">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.application_compliance_officers">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.persons">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.persons">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.organisation_has_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.organisation_has_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.email_notifications">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.email_notifications">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.project_beneficiaries">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.project_beneficiaries">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.approval_meeting_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.approval_meeting_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.bank_accounts">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.bank_accounts">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.beneficiaries">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.beneficiaries">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.provinces">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.provinces">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.call_evaluations">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.call_evaluations">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.project_budget">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.project_budget">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.organisation_statuses">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.organisation_statuses">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.approval_meetings">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.approval_meetings">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.contract_implementation_plan">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.contract_implementation_plan">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.organisation_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.organisation_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.payment_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.payment_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.project_contracts">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.project_contracts">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.personal_titles">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.personal_titles">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.milestone_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.milestone_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.job_titles">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.job_titles">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.payment_schedule">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.payment_schedule">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.project_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.project_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.project_outputs">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.project_outputs">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.project_statuses">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.project_statuses">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.question_options">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.question_options">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.call_application_statuses">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.call_application_statuses">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.key_performance_indicators_targets">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.key_performance_indicators_targets">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.evc_attendees">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.evc_attendees">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.key_performance_indicators">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.key_performance_indicators">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.key_result_areas">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.key_result_areas">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.calls">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.calls">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.project_expenses">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.project_expenses">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.contract_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.contract_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.questions">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.questions">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.organisation_bank_accounts">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.organisation_bank_accounts">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.project_milestones">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.project_milestones">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.person_bank_accounts">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.person_bank_accounts">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.organisations">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.organisations">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.projects">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.projects">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.suburbs">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.suburbs">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.compliance_answers">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.compliance_answers">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.categories">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.categories">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.evc_applications">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.evc_applications">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.places">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.places">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.call_applications">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.call_applications">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.question_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.question_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_row" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false" arguments="true"
	 table="public.submission_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<trigger name="audit_trigger_stm" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="false" upd-event="false" trunc-event="true" arguments="true"
	 table="public.submission_types">
		<function signature="audit.if_modified_func()"/>
</trigger>

<view name="lookup_organisations">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1025.13" y="4494.03"/>
	<reference>
		<expression><![CDATA[ SELECT organisations.id,
    organisations.code,
    organisations.name,
    organisations.web_site,
    organisations.email_address,
    organisations1.name AS referee,
    organisations2.name AS auditor,
    provinces.name AS province
   FROM ((((organisations
     LEFT JOIN organisations organisations1 ON ((organisations.referee = organisations1.id)))
     LEFT JOIN organisations organisations2 ON ((organisations.auditor = organisations2.id)))
     LEFT JOIN organisation_types ON ((organisations.organisation_type = organisation_types.id)))
     LEFT JOIN provinces ON ((organisations.street_province = provinces.id)));]]></expression>
	</reference>
</view>

<view name="grid_organisations">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1268.7" y="4494.03"/>
	<reference>
		<expression><![CDATA[ SELECT organisations.id,
    organisations.code,
    organisations.name,
    organisations.web_site,
    organisations.email_address,
    organisations1.name AS referee,
    organisations2.name AS auditor,
    provinces.name AS province,
    organisations.npo_no
   FROM (((organisations
     LEFT JOIN organisations organisations1 ON ((organisations.referee = organisations1.id)))
     LEFT JOIN organisations organisations2 ON ((organisations.auditor = organisations2.id)))
     LEFT JOIN provinces ON ((organisations.street_province = provinces.id)))
  ORDER BY organisations.name;]]></expression>
	</reference>
</view>

<view name="lookup_suburbs">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="164.286" y="4581.43"/>
	<reference>
		<expression><![CDATA[ SELECT suburbs.id,
    ((((suburbs.name)::text || ' ('::text) || (COALESCE(suburbs.po_box_code, ''::character varying))::text) || ')'::text) AS box_label,
    ((((suburbs.name)::text || ' ('::text) || (COALESCE(suburbs.street_code, ''::character varying))::text) || ')'::text) AS street_label,
    suburbs.place
   FROM suburbs;]]></expression>
	</reference>
</view>

<usertype name="coordtype" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="y">
		<type name="double precision"/>
	</typeattrib>
	<typeattrib name="x">
		<type name="double precision"/>
	</typeattrib>
</usertype>

<view name="rpt_org_data">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="398.011" y="4581.43"/>
	<reference>
		<expression><![CDATA[ SELECT organisations.id,
    organisations.code,
    organisations.name,
    organisations.web_site,
    organisations.vat_no,
    organisations.npo_no,
    organisations.cell_phone,
    organisations.work_phone,
    organisations.email_address,
    organisations.fax_no,
    organisations.street_first_line,
    organisations.street_second_line,
    organisations.postal_first_line,
    organisations.postal_second_line,
    suburbs1.name AS street_suburb,
    suburbs1.street_code,
    places1.name AS street_place,
    provinces1.name AS street_province,
    suburbs.name AS postal_name,
    suburbs.po_box_code AS postal_code,
    places.name AS postal_place,
    provinces.name AS postal_province,
    personal_titles.title AS org_contact_title,
    persons.first_names AS org_contact_first_names,
    persons.last_name AS org_contact_last_names,
    persons.email_address AS org_contact_email,
    persons.cell_phone AS org_contact_cell_phone,
    persons.work_phone AS org_contact_work_phone
   FROM ((((((((organisations
     LEFT JOIN persons ON ((organisations.main_contact_person = persons.id)))
     LEFT JOIN suburbs suburbs1 ON ((organisations.street_suburb = suburbs1.id)))
     LEFT JOIN places places1 ON ((suburbs1.place = places1.id)))
     LEFT JOIN provinces provinces1 ON ((places1.province = provinces1.id)))
     LEFT JOIN suburbs ON ((organisations.postal_suburb = suburbs.id)))
     LEFT JOIN places ON ((suburbs.place = places.id)))
     LEFT JOIN provinces ON ((places.province = provinces.id)))
     LEFT JOIN personal_titles ON ((persons.personal_title = personal_titles.id)))
  ORDER BY organisations.name;]]></expression>
	</reference>
</view>

<view name="rpt_ack_letter_data">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="632.298" y="4581.43"/>
	<reference>
		<expression><![CDATA[ SELECT calls.id,
    calls.call_reference,
    calls.name AS call_title,
    call_applications.id AS application_ref,
    personal_titles.title AS app_contact_title,
    persons.first_names AS app_contact_first_names,
    persons.last_name AS app_contact_last_names,
    persons.email_address AS app_contact_email,
    persons.cell_phone AS app_contact_cell_phone,
    persons.work_phone AS app_contact_work_phone,
    rpt_org_data.code,
    rpt_org_data.name,
    rpt_org_data.web_site,
    rpt_org_data.vat_no,
    rpt_org_data.npo_no,
    rpt_org_data.cell_phone,
    rpt_org_data.work_phone,
    rpt_org_data.email_address,
    rpt_org_data.fax_no,
    rpt_org_data.street_first_line,
    rpt_org_data.street_second_line,
    rpt_org_data.postal_first_line,
    rpt_org_data.postal_second_line,
    rpt_org_data.street_suburb,
    rpt_org_data.street_code,
    rpt_org_data.street_place,
    rpt_org_data.street_province,
    rpt_org_data.postal_name,
    rpt_org_data.postal_code,
    rpt_org_data.postal_place,
    rpt_org_data.postal_province,
    rpt_org_data.org_contact_title,
    rpt_org_data.org_contact_first_names,
    rpt_org_data.org_contact_last_names,
    rpt_org_data.org_contact_email,
    rpt_org_data.org_contact_cell_phone,
    rpt_org_data.org_contact_work_phone
   FROM ((((rpt_org_data
     RIGHT JOIN call_applications ON ((call_applications.applicant = rpt_org_data.id)))
     RIGHT JOIN calls ON ((call_applications.call = calls.id)))
     LEFT JOIN persons ON ((call_applications.contact_person = persons.id)))
     LEFT JOIN personal_titles ON ((persons.personal_title = personal_titles.id)));]]></expression>
	</reference>
</view>

<extension name="uuid-ossp" cur-version="1.0">
	<schema name="public"/>
	<comment><![CDATA[generate universally unique identifiers (UUIDs)]]></comment>
</extension>

<view name="grid_compliance_applications_for_assessors">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="861.398" y="4581.43"/>
	<reference>
		<expression><![CDATA[ SELECT application_compliance_officers.id,
    application_compliance_officers.application,
    application_compliance_officers.compliance_officer,
    persons.first_names,
    persons.last_name,
    persons.email_address,
    calls.call_reference,
    organisations.name,
    provinces.name AS province,
    application_compliance_officers.lead,
    calls.admin_compliance_template,
    calls.relevance_compliance_template,
    calls.assessment_compliance_template,
    application_compliance_officers.complete,
    application_compliance_officers.compliance_section,
    call_applications.application_status,
    call_application_statuses.description AS application_status_description,
    calls.due_diligence_compliance_template
   FROM ((((((application_compliance_officers
     JOIN call_applications ON ((application_compliance_officers.application = call_applications.id)))
     JOIN organisations ON ((call_applications.applicant = organisations.id)))
     JOIN calls ON ((call_applications.call = calls.id)))
     JOIN persons ON ((application_compliance_officers.compliance_officer = persons.id)))
     LEFT JOIN provinces ON ((organisations.street_province = provinces.id)))
     JOIN call_application_statuses ON ((call_applications.application_status = call_application_statuses.id)));]]></expression>
	</reference>
</view>

<function name="login"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="basic_auth.jwt_claims"/>
	</return-type>
	<parameter name="email">
		<type name="text"/>
	</parameter>
	<parameter name="pass">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
declare
  _role name;
  result basic_auth.jwt_claims;
  _person_id integer;
begin
  select basic_auth.user_role(email, pass) into _role;
  if _role is null then
    raise invalid_password using message = 'invalid user or password';
  end if;

  select id into _person_id from persons where persons.login_email = login.email limit 1;
  -- TODO; check verified flag if you care whether users
  -- have validated their emails
  select _role as role, login.email as email,null, _person_id as person_id into result;
  return result;
end;
]]></definition>
</function>

<function name="copy_template"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="template_name">
		<type name="text"/>
	</parameter>
	<parameter name="template_title">
		<type name="text"/>
	</parameter>
	<parameter name="template_id_source">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
template_id_dest 	integer;
category_id_dest 	integer;
question_id_dest 	integer;
category_source		categories%rowtype;
question_source		questions%rowtype;
BEGIN	
	SET ROLE postgres;

	INSERT INTO compliance_templates (name,title) VALUES (template_name,template_title) 
        RETURNING compliance_templates.id INTO template_id_dest;
        
        FOR category_source IN
		SELECT * FROM categories WHERE categories.template = template_id_source ORDER BY categories.id		
	LOOP
		INSERT INTO 
		public.categories(template, name, title,lead)
		VALUES (template_id_dest,category_source.name,category_source.title,category_source.lead)
		RETURNING categories.id INTO category_id_dest;
		
		FOR question_source IN
			SELECT * FROM questions WHERE questions.catergory = category_source.id ORDER BY questions.id		
		LOOP
			INSERT INTO 
			public.questions(question,weight,has_options,catergory,type,lead_question,has_motivation,is_scoring,max_scoring,description,question_number,required)
			VALUES (question_source.question,
				question_source.weight,
				question_source.has_options,
				category_id_dest,
				question_source.type,
				question_source.lead_question,
				question_source.has_motivation,
				question_source.is_scoring,
				question_source.max_scoring,
				question_source.description,
				question_source.question_number,
				question_source.required);

		END LOOP;
	END LOOP;
	RETURN;	       

END;]]></definition>
</function>

<table name="project_partners">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="890" y="3130"/>
	<column name="id" not-null="true">
		<type name="serial"/>
	</column>
	<column name="project">
		<type name="integer"/>
	</column>
	<column name="organisation">
		<type name="integer"/>
	</column>
	<column name="person">
		<type name="integer"/>
	</column>
	<constraint name="project_partners_pkey" type="pk-constr" table="public.project_partners">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="project_partner_organisation_uq" type="uq-constr" table="public.project_partners">
		<columns names="project,organisation" ref-type="src-columns"/>
	</constraint>
	<constraint name="project_partner_person_uq" type="uq-constr" table="public.project_partners">
		<columns names="project,person" ref-type="src-columns"/>
	</constraint>
</table>

<constraint name="call_application_statuses_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.call_application_statuses" table="public.call_applications">
	<columns names="application_status" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="organisations_fk0" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.organisations" table="public.call_applications">
	<columns names="applicant" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="places_fk2" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.places" table="public.call_applications">
	<columns names="place" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="calls_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.calls" table="public.call_applications">
	<columns names="call" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="contact_person_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.persons" table="public.call_applications">
	<columns names="contact_person" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="ack_email_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.email_notifications" table="public.call_applications">
	<columns names="ack_email" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="admin_template_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.compliance_templates" table="public.calls">
	<columns names="admin_compliance_template" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="assessment_template_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.compliance_templates" table="public.calls">
	<columns names="assessment_compliance_template" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="due_diligence_template_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.compliance_templates" table="public.calls">
	<columns names="due_diligence_compliance_template" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="key_performance_indicators_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.key_performance_indicators" table="public.calls">
	<columns names="key_performance_indicator" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="relevance_template_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.compliance_templates" table="public.calls">
	<columns names="relevance_compliance_template" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="key_result_areas_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.key_result_areas" table="public.key_performance_indicators">
	<columns names="key_result_area" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="programmes_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.programmes" table="public.key_result_areas">
	<columns names="programme" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="auditor_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.organisations" table="public.organisations">
	<columns names="auditor" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="organisation_statuses_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.organisation_statuses" table="public.organisations">
	<columns names="organisation_status" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="organisation_types_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.organisation_types" table="public.organisations">
	<columns names="organisation_type" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="places_fk1" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.places" table="public.organisations">
	<columns names="street_place" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="provinces_fk1" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.provinces" table="public.organisations">
	<columns names="street_province" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="referee_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.organisations" table="public.organisations">
	<columns names="referee" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="main_contact_person_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.persons" table="public.organisations">
	<columns names="main_contact_person" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="places_fk2" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.places" table="public.organisations">
	<columns names="postal_place" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="provinces_fk2" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.provinces" table="public.organisations">
	<columns names="postal_province" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="suburbs_fk1" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.suburbs" table="public.organisations">
	<columns names="street_suburb" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="suburbs_fk2" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.suburbs" table="public.organisations">
	<columns names="postal_suburb" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="places_fk0" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.places" table="public.suburbs">
	<columns names="place" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="provinces_fk0" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.provinces" table="public.suburbs">
	<columns names="province" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="provinces_fk2" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.provinces" table="public.places">
	<columns names="province" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="tokens_email_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="basic_auth.users" table="basic_auth.tokens">
	<columns names="email" ref-type="src-columns"/>
	<columns names="email" ref-type="dst-columns"/>
</constraint>

<constraint name="call_applications_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.call_applications" table="public.application_compliance_officers">
	<columns names="application" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="persons_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.persons" table="public.application_compliance_officers">
	<columns names="compliance_officer" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="bank_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.organisations" table="public.bank_accounts">
	<columns names="bank" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="call_applications_fk0" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.call_applications" table="public.call_evaluations">
	<columns names="call_application" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="persons_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.persons" table="public.call_evaluations">
	<columns names="evaluator" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="compliance_templates_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.compliance_templates" table="public.categories">
	<columns names="template" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="application_compliance_officers_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.application_compliance_officers" table="public.compliance_answers">
	<columns names="application_compliance_officer" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="questions_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.questions" table="public.compliance_answers">
	<columns names="question" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="project_budget_partner" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.project_partners" table="public.project_budget">
	<columns names="project_partner" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="project_contracts_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.project_contracts" table="public.contract_implementation_plan">
	<columns names="contract" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="approval_meeting_type_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.approval_meeting_types" table="public.approval_meetings">
	<columns names="approval_meeting_type" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="evc_attendees_attendee_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.persons" table="public.evc_attendees">
	<columns names="attendee" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="evc_attendees_evc_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.approval_meetings" table="public.evc_attendees">
	<columns names="evc" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="evc_has_applications_application_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.call_applications" table="public.evc_applications">
	<columns names="application" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="evc_has_applications_evc_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.approval_meetings" table="public.evc_applications">
	<columns names="evc" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="job_titles_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.job_titles" table="public.persons">
	<columns names="job_title" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="organisations_fk1" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.organisations" table="public.persons">
	<columns names="employer" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="personal_titles_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.personal_titles" table="public.persons">
	<columns names="personal_title" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="key_performance_indicators_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.key_performance_indicators" table="public.key_performance_indicators_targets">
	<columns names="key_performance_indicator" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="bank_accounts_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.bank_accounts" table="public.organisation_bank_accounts">
	<columns names="bankaccount" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="organisations_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.organisations" table="public.organisation_bank_accounts">
	<columns names="ogranisation" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="project_contracts_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.project_contracts" table="public.payment_schedule">
	<columns names="contract" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="bank_accounts_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.bank_accounts" table="public.person_bank_accounts">
	<columns names="person" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="persons_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.persons" table="public.person_bank_accounts">
	<columns names="bankaccount" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="beneficiaries_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.beneficiaries" table="public.project_beneficiaries">
	<columns names="beneficiary" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="projects_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.projects" table="public.project_beneficiaries">
	<columns names="project" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="contract_types_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.contract_types" table="public.project_contracts">
	<columns names="contract_type" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="persons_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.persons" table="public.project_contracts">
	<columns names="person" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="project_contract_partner_fkey" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.project_partners" table="public.project_contracts">
	<columns names="project_partner" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="organisations_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.organisations" table="public.project_expenses">
	<columns names="organisation" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="payment_reference_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.projects" table="public.project_expenses">
	<columns names="project" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="payment_schedule_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.payment_schedule" table="public.project_expenses">
	<columns names="payment_schedule" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="payment_types_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.payment_types" table="public.project_expenses">
	<columns names="payment_type" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="persons_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.persons" table="public.project_expenses">
	<columns names="person" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="milestone_type_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.milestone_types" table="public.project_milestones">
	<columns names="milestone_type" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="project_pk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.projects" table="public.project_milestones">
	<columns names="project" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="key_performance_indicator_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.key_performance_indicators" table="public.project_outputs">
	<columns names="key_performance_indicator" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="milestone_of" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.projects" table="public.project_outputs">
	<columns names="project" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="call_application_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.call_applications" table="public.projects">
	<columns names="call_application" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="key_performance_indicator_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.key_performance_indicators" table="public.projects">
	<columns names="key_performance_indicator" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="latest_milestone_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.project_milestones" table="public.projects">
	<columns names="latest_milestone" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="place_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.places" table="public.projects">
	<columns names="place" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="project_status_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.project_statuses" table="public.projects">
	<columns names="project_status" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="project_type_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.project_types" table="public.projects">
	<columns names="project_type" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="questions_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.questions" table="public.question_options">
	<columns names="question" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="question_types_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="SET NULL" ref-table="public.question_types" table="public.questions">
	<columns names="type" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="categories_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.categories" table="public.questions">
	<columns names="catergory" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="fk_organisation" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.organisations" table="public.organisation_has_types">
	<columns names="organisation" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="fk_types" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.organisation_types" table="public.organisation_has_types">
	<columns names="type" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="project_partner_fkey" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.projects" table="public.project_partners">
	<columns names="project" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="partner_person_fkey" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.persons" table="public.project_partners">
	<columns names="person" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="partner_organisation_fkey" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.organisations" table="public.project_partners">
	<columns names="organisation" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_call_applications_call_application_statuses" type="relfk"
	 custom-color="#273090"
	 src-table="public.call_applications"
	 dst-table="public.call_application_statuses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_call_applications_organisations" type="relfk"
	 custom-color="#660c3f"
	 src-table="public.call_applications"
	 dst-table="public.organisations"
	 src-required="false" dst-required="false"/>

<relationship name="rel_call_applications_places" type="relfk"
	 custom-color="#7e6ff1"
	 src-table="public.call_applications"
	 dst-table="public.places"
	 src-required="false" dst-required="false"/>

<relationship name="rel_call_applications_calls" type="relfk"
	 custom-color="#345bbc"
	 src-table="public.call_applications"
	 dst-table="public.calls"
	 src-required="false" dst-required="false"/>

<relationship name="rel_call_applications_persons" type="relfk"
	 custom-color="#c5c3cd"
	 src-table="public.call_applications"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_call_applications_email_notifications" type="relfk"
	 custom-color="#afa26e"
	 src-table="public.call_applications"
	 dst-table="public.email_notifications"
	 src-required="false" dst-required="false"/>

<relationship name="rel_calls_compliance_templates" type="relfk"
	 custom-color="#6e441e"
	 src-table="public.calls"
	 dst-table="public.compliance_templates"
	 src-required="false" dst-required="false"/>

<relationship name="rel_calls_key_performance_indicators" type="relfk"
	 custom-color="#88ad5a"
	 src-table="public.calls"
	 dst-table="public.key_performance_indicators"
	 src-required="false" dst-required="false"/>

<relationship name="rel_key_performance_indicators_key_result_areas" type="relfk"
	 custom-color="#78d463"
	 src-table="public.key_performance_indicators"
	 dst-table="public.key_result_areas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_key_result_areas_programmes" type="relfk"
	 custom-color="#18036a"
	 src-table="public.key_result_areas"
	 dst-table="public.programmes"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisations_organisations" type="relfk"
	 custom-color="#88acca"
	 src-table="public.organisations"
	 dst-table="public.organisations"
	 src-required="false" dst-required="false">
	<line>
		<position x="1176.65" y="3778.52"/>
	<position x="1176.65" y="3551.44"/>
	<position x="1031.31" y="3551.44"/>
	</line>
</relationship>

<relationship name="rel_organisations_organisation_statuses" type="relfk"
	 custom-color="#f5a695"
	 src-table="public.organisations"
	 dst-table="public.organisation_statuses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisations_organisation_types" type="relfk"
	 custom-color="#bfd8a4"
	 src-table="public.organisations"
	 dst-table="public.organisation_types"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisations_places" type="relfk"
	 custom-color="#c5bd08"
	 src-table="public.organisations"
	 dst-table="public.places"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisations_provinces" type="relfk"
	 custom-color="#15c25d"
	 src-table="public.organisations"
	 dst-table="public.provinces"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisations_persons" type="relfk"
	 custom-color="#c22e66"
	 src-table="public.organisations"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisations_suburbs" type="relfk"
	 custom-color="#535515"
	 src-table="public.organisations"
	 dst-table="public.suburbs"
	 src-required="false" dst-required="false"/>

<relationship name="rel_suburbs_places" type="relfk"
	 custom-color="#7469d9"
	 src-table="public.suburbs"
	 dst-table="public.places"
	 src-required="false" dst-required="false"/>

<relationship name="rel_suburbs_provinces" type="relfk"
	 custom-color="#1ed0bd"
	 src-table="public.suburbs"
	 dst-table="public.provinces"
	 src-required="false" dst-required="false"/>

<relationship name="rel_places_provinces" type="relfk"
	 custom-color="#f548b1"
	 src-table="public.places"
	 dst-table="public.provinces"
	 src-required="false" dst-required="false"/>

<relationship name="rel_tokens_users" type="relfk"
	 custom-color="#9954da"
	 src-table="basic_auth.tokens"
	 dst-table="basic_auth.users"
	 src-required="false" dst-required="false"/>

<relationship name="rel_application_compliance_officers_call_applications" type="relfk"
	 custom-color="#85c011"
	 src-table="public.application_compliance_officers"
	 dst-table="public.call_applications"
	 src-required="false" dst-required="false"/>

<relationship name="rel_application_compliance_officers_persons" type="relfk"
	 custom-color="#2f5996"
	 src-table="public.application_compliance_officers"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bank_accounts_organisations" type="relfk"
	 custom-color="#66cecb"
	 src-table="public.bank_accounts"
	 dst-table="public.organisations"
	 src-required="false" dst-required="false"/>

<relationship name="rel_call_evaluations_call_applications" type="relfk"
	 custom-color="#c88d1c"
	 src-table="public.call_evaluations"
	 dst-table="public.call_applications"
	 src-required="false" dst-required="false"/>

<relationship name="rel_call_evaluations_persons" type="relfk"
	 custom-color="#373164"
	 src-table="public.call_evaluations"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categories_compliance_templates" type="relfk"
	 custom-color="#37a4fc"
	 src-table="public.categories"
	 dst-table="public.compliance_templates"
	 src-required="false" dst-required="false"/>

<relationship name="rel_compliance_answers_application_compliance_officers" type="relfk"
	 custom-color="#637d21"
	 src-table="public.compliance_answers"
	 dst-table="public.application_compliance_officers"
	 src-required="false" dst-required="false"/>

<relationship name="rel_compliance_answers_questions" type="relfk"
	 custom-color="#00fbab"
	 src-table="public.compliance_answers"
	 dst-table="public.questions"
	 src-required="false" dst-required="false"/>

<relationship name="rel_contract_implementation_plan_project_contracts" type="relfk"
	 custom-color="#13fe7c"
	 src-table="public.contract_implementation_plan"
	 dst-table="public.project_contracts"
	 src-required="false" dst-required="false"/>

<relationship name="rel_approval_meetings_approval_meeting_types" type="relfk"
	 custom-color="#b34a0c"
	 src-table="public.approval_meetings"
	 dst-table="public.approval_meeting_types"
	 src-required="false" dst-required="false"/>

<relationship name="rel_evc_applications_call_applications" type="relfk"
	 custom-color="#47548f"
	 src-table="public.evc_applications"
	 dst-table="public.call_applications"
	 src-required="false" dst-required="false"/>

<relationship name="rel_evc_applications_approval_meetings" type="relfk"
	 custom-color="#4caf28"
	 src-table="public.evc_applications"
	 dst-table="public.approval_meetings"
	 src-required="false" dst-required="false"/>

<relationship name="rel_evc_attendees_persons" type="relfk"
	 custom-color="#7549a0"
	 src-table="public.evc_attendees"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_evc_attendees_approval_meetings" type="relfk"
	 custom-color="#8f575b"
	 src-table="public.evc_attendees"
	 dst-table="public.approval_meetings"
	 src-required="false" dst-required="false"/>

<relationship name="rel_persons_job_titles" type="relfk"
	 custom-color="#656767"
	 src-table="public.persons"
	 dst-table="public.job_titles"
	 src-required="false" dst-required="false"/>

<relationship name="rel_persons_personal_titles" type="relfk"
	 custom-color="#83ebf2"
	 src-table="public.persons"
	 dst-table="public.personal_titles"
	 src-required="false" dst-required="false"/>

<relationship name="rel_key_performance_indicators_targets_key_performance_indicato" type="relfk"
	 custom-color="#9ad229"
	 src-table="public.key_performance_indicators_targets"
	 dst-table="public.key_performance_indicators"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisation_bank_accounts_bank_accounts" type="relfk"
	 custom-color="#a7c1d6"
	 src-table="public.organisation_bank_accounts"
	 dst-table="public.bank_accounts"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisation_bank_accounts_organisations" type="relfk"
	 custom-color="#fb3d42"
	 src-table="public.organisation_bank_accounts"
	 dst-table="public.organisations"
	 src-required="false" dst-required="false"/>

<relationship name="rel_payment_schedule_project_contracts" type="relfk"
	 custom-color="#8f9694"
	 src-table="public.payment_schedule"
	 dst-table="public.project_contracts"
	 src-required="false" dst-required="false"/>

<relationship name="rel_person_bank_accounts_bank_accounts" type="relfk"
	 custom-color="#8048e5"
	 src-table="public.person_bank_accounts"
	 dst-table="public.bank_accounts"
	 src-required="false" dst-required="false"/>

<relationship name="rel_person_bank_accounts_persons" type="relfk"
	 custom-color="#5c5fc4"
	 src-table="public.person_bank_accounts"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_beneficiaries_beneficiaries" type="relfk"
	 custom-color="#f6b736"
	 src-table="public.project_beneficiaries"
	 dst-table="public.beneficiaries"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_beneficiaries_projects" type="relfk"
	 custom-color="#957d07"
	 src-table="public.project_beneficiaries"
	 dst-table="public.projects"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_contracts_contract_types" type="relfk"
	 custom-color="#911269"
	 src-table="public.project_contracts"
	 dst-table="public.contract_types"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_contracts_persons" type="relfk"
	 custom-color="#7d6dd1"
	 src-table="public.project_contracts"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_expenses_organisations" type="relfk"
	 custom-color="#1670cc"
	 src-table="public.project_expenses"
	 dst-table="public.organisations"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_expenses_projects" type="relfk"
	 custom-color="#1c8965"
	 src-table="public.project_expenses"
	 dst-table="public.projects"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_expenses_payment_schedule" type="relfk"
	 custom-color="#d398eb"
	 src-table="public.project_expenses"
	 dst-table="public.payment_schedule"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_expenses_payment_types" type="relfk"
	 custom-color="#c48f4f"
	 src-table="public.project_expenses"
	 dst-table="public.payment_types"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_expenses_persons" type="relfk"
	 custom-color="#87bd1f"
	 src-table="public.project_expenses"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_milestones_milestone_types" type="relfk"
	 custom-color="#c1d104"
	 src-table="public.project_milestones"
	 dst-table="public.milestone_types"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_milestones_projects" type="relfk"
	 custom-color="#65fcbb"
	 src-table="public.project_milestones"
	 dst-table="public.projects"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_outputs_key_performance_indicators" type="relfk"
	 custom-color="#f8bcd8"
	 src-table="public.project_outputs"
	 dst-table="public.key_performance_indicators"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_outputs_projects" type="relfk"
	 custom-color="#462b8c"
	 src-table="public.project_outputs"
	 dst-table="public.projects"
	 src-required="false" dst-required="false"/>

<relationship name="rel_projects_call_applications" type="relfk"
	 custom-color="#7fdb46"
	 src-table="public.projects"
	 dst-table="public.call_applications"
	 src-required="false" dst-required="false"/>

<relationship name="rel_projects_key_performance_indicators" type="relfk"
	 custom-color="#b01a17"
	 src-table="public.projects"
	 dst-table="public.key_performance_indicators"
	 src-required="false" dst-required="false"/>

<relationship name="rel_projects_places" type="relfk"
	 custom-color="#c184f9"
	 src-table="public.projects"
	 dst-table="public.places"
	 src-required="false" dst-required="false"/>

<relationship name="rel_projects_project_statuses" type="relfk"
	 custom-color="#b746d3"
	 src-table="public.projects"
	 dst-table="public.project_statuses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_projects_project_types" type="relfk"
	 custom-color="#92b108"
	 src-table="public.projects"
	 dst-table="public.project_types"
	 src-required="false" dst-required="false"/>

<relationship name="rel_question_options_questions" type="relfk"
	 custom-color="#224c2a"
	 src-table="public.question_options"
	 dst-table="public.questions"
	 src-required="false" dst-required="false"/>

<relationship name="rel_questions_question_types" type="relfk"
	 custom-color="#e9819b"
	 src-table="public.questions"
	 dst-table="public.question_types"
	 src-required="false" dst-required="false"/>

<relationship name="rel_questions_categories" type="relfk"
	 custom-color="#a797b9"
	 src-table="public.questions"
	 dst-table="public.categories"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisation_has_types_organisations" type="relfk"
	 custom-color="#f4110b"
	 src-table="public.organisation_has_types"
	 dst-table="public.organisations"
	 src-required="false" dst-required="false"/>

<relationship name="rel_organisation_has_types_organisation_types" type="relfk"
	 custom-color="#4a2efb"
	 src-table="public.organisation_has_types"
	 dst-table="public.organisation_types"
	 src-required="false" dst-required="false"/>

<relationship name="rel_person_projects" type="relfk"
	 src-table="public.project_partners"
	 dst-table="public.projects"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_partners_persons" type="relfk"
	 src-table="public.project_partners"
	 dst-table="public.persons"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_partners_organisations" type="relfk"
	 src-table="public.project_partners"
	 dst-table="public.organisations"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_contracts_project_partners" type="relfk"
	 src-table="public.project_contracts"
	 dst-table="public.project_partners"
	 src-required="false" dst-required="false"/>

<relationship name="rel_project_budget_project_partners" type="relfk"
	 src-table="public.project_budget"
	 dst-table="public.project_partners"
	 src-required="false" dst-required="false"/>

<permission>
	<object name="basic_auth" type="schema"/>
	<roles names="postgres"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="basic_auth" type="schema"/>
	<roles names="anon"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="basic_auth" type="schema"/>
	<roles names="assessor"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="basic_auth.user_role(text,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="basic_auth.user_role(text,text)" type="function"/>
	<roles names="anon"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_change_application_status" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.suburbs" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_create_application_code" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_calls" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.places" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.provinces" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_places" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_programmes" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_project_statuses" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_provinces" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.create_ldap_user(text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.create_ldap_user(text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.create_ldap_user(text)" type="function"/>
	<roles names="anon"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.request_password_reset(text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.request_password_reset(text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.request_password_reset(text)" type="function"/>
	<roles names="anon"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.reset_password(text,uuid,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.reset_password(text,uuid,text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.reset_password(text,uuid,text)" type="function"/>
	<roles names="anon"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signup(text,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signup(text,text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signup(text,text)" type="function"/>
	<roles names="anon"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.validate_user(text,uuid)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.validate_user(text,uuid)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.validate_user(text,uuid)" type="function"/>
	<roles names="anon"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="basic_auth.tokens" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="basic_auth.tokens" type="table"/>
	<roles names="anon"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="basic_auth.users" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="basic_auth.users" type="table"/>
	<roles names="anon"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.application_compliance_officers" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.application_compliance_officers" type="table"/>
	<roles names="assessor"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.categories" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.categories" type="table"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.compliance_answers" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.compliance_answers" type="table"/>
	<roles names="assessor"/>
	<privileges select="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.compliance_templates" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.compliance_templates" type="table"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.email_notifications" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.email_notifications" type="table"/>
	<roles names="anon"/>
	<privileges select="true" update="true"/>
</permission>
<permission>
	<object name="public.email_notifications_not_sent" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.email_notifications_to_json" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.email_notifications_to_json" type="view"/>
	<roles names="anon"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.approval_meetings" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.evc_applications" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.evc_attendees" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.persons" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.persons" type="table"/>
	<roles names="anon"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.grid_compliance_applications" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_evc" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_evc_applications" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_evc_attendees" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.organisation_statuses" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_org_statuses" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.organisation_types" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_org_types" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.users" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.users" type="view"/>
	<roles names="anon"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.grid_places" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_provinces" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_suburbs" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.ldap_users" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.lookup_evc_applications" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.lookup_roles" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.question_options" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.question_options" type="table"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.question_types" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.question_types" type="table"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.questions" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.questions" type="table"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.reporting_assessment" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.submission_types" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_submission_types" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_cities" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_pmu_applications" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_assigned_applications" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_persons" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_suburbs" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_organisations" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_create_application" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.rpc_alfresco_get_projects" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.alfresco_get_organisations(integer,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.alfresco_get_organisations(integer,text)" type="function"/>
	<roles names="alfresco_user"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.lookup_compliance_officers" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.lookup_compliance_applications" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.lookup_templates_max_score" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.compliance_section_scoring_average_a" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.application_compliance_average_score" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.application_compliance_average_score" type="view"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.lookup_calls_uigrid" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.lookup_calls_uigrid" type="view"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.grid_compliance_applications_with_lead" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_compliance_applications_with_lead" type="view"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.approval_meeting_types" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_approval_meetings" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="audit" type="schema"/>
	<roles names="postgres"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="audit.logged_actions" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_compliance_applications_for_assessors" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.grid_compliance_applications_for_assessors" type="view"/>
	<roles names="assessor"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.login(text,text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.login(text,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.login(text,text)" type="function"/>
	<roles names="anon"/>
	<privileges execute="true"/>
</permission>
</dbmodel>
